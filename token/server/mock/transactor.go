// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger/fabric/protos/token"
	"github.com/hyperledger/fabric/token/server"
)

type Transactor struct {
	ListUnspentTokensStub        func() ([]*token.TokenOutput, error)
	listUnspentTokensMutex       sync.RWMutex
	listUnspentTokensArgsForCall []struct{}
	listUnspentTokensReturns     struct {
		result1 []*token.TokenOutput
		result2 error
	}
	listUnspentTokensReturnsOnCall map[int]struct {
		result1 []*token.TokenOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Transactor) ListUnspentTokens() ([]*token.TokenOutput, error) {
	fake.listUnspentTokensMutex.Lock()
	ret, specificReturn := fake.listUnspentTokensReturnsOnCall[len(fake.listUnspentTokensArgsForCall)]
	fake.listUnspentTokensArgsForCall = append(fake.listUnspentTokensArgsForCall, struct{}{})
	fake.recordInvocation("ListUnspentTokens", []interface{}{})
	fake.listUnspentTokensMutex.Unlock()
	if fake.ListUnspentTokensStub != nil {
		return fake.ListUnspentTokensStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listUnspentTokensReturns.result1, fake.listUnspentTokensReturns.result2
}

func (fake *Transactor) ListUnspentTokensCallCount() int {
	fake.listUnspentTokensMutex.RLock()
	defer fake.listUnspentTokensMutex.RUnlock()
	return len(fake.listUnspentTokensArgsForCall)
}

func (fake *Transactor) ListUnspentTokensReturns(result1 []*token.TokenOutput, result2 error) {
	fake.ListUnspentTokensStub = nil
	fake.listUnspentTokensReturns = struct {
		result1 []*token.TokenOutput
		result2 error
	}{result1, result2}
}

func (fake *Transactor) ListUnspentTokensReturnsOnCall(i int, result1 []*token.TokenOutput, result2 error) {
	fake.ListUnspentTokensStub = nil
	if fake.listUnspentTokensReturnsOnCall == nil {
		fake.listUnspentTokensReturnsOnCall = make(map[int]struct {
			result1 []*token.TokenOutput
			result2 error
		})
	}
	fake.listUnspentTokensReturnsOnCall[i] = struct {
		result1 []*token.TokenOutput
		result2 error
	}{result1, result2}
}

func (fake *Transactor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listUnspentTokensMutex.RLock()
	defer fake.listUnspentTokensMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Transactor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.Transactor = new(Transactor)
