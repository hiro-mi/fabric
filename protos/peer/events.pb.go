// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/events.proto

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/hyperledger/fabric/protos/common"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EventType int32

const (
	EventType_REGISTER      EventType = 0
	EventType_BLOCK         EventType = 1
	EventType_CHAINCODE     EventType = 2
	EventType_REJECTION     EventType = 3
	EventType_FILTEREDBLOCK EventType = 4
)

var EventType_name = map[int32]string{
	0: "REGISTER",
	1: "BLOCK",
	2: "CHAINCODE",
	3: "REJECTION",
	4: "FILTEREDBLOCK",
}
var EventType_value = map[string]int32{
	"REGISTER":      0,
	"BLOCK":         1,
	"CHAINCODE":     2,
	"REJECTION":     3,
	"FILTEREDBLOCK": 4,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

// ChaincodeReg is used for registering chaincode Interests
// when EventType is CHAINCODE
type ChaincodeReg struct {
	ChaincodeId string `protobuf:"bytes,1,opt,name=chaincode_id,json=chaincodeId" json:"chaincode_id,omitempty"`
	EventName   string `protobuf:"bytes,2,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
}

func (m *ChaincodeReg) Reset()                    { *m = ChaincodeReg{} }
func (m *ChaincodeReg) String() string            { return proto.CompactTextString(m) }
func (*ChaincodeReg) ProtoMessage()               {}
func (*ChaincodeReg) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *ChaincodeReg) GetChaincodeId() string {
	if m != nil {
		return m.ChaincodeId
	}
	return ""
}

func (m *ChaincodeReg) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

type Interest struct {
	EventType EventType `protobuf:"varint,1,opt,name=event_type,json=eventType,enum=protos.EventType" json:"event_type,omitempty"`
	// Ideally we should just have the following oneof for different
	// Reg types and get rid of EventType. But this is an API change
	// Additional Reg types may add messages specific to their type
	// to the oneof.
	//
	// Types that are valid to be assigned to RegInfo:
	//	*Interest_ChaincodeRegInfo
	RegInfo isInterest_RegInfo `protobuf_oneof:"RegInfo"`
	ChainID string             `protobuf:"bytes,3,opt,name=chainID" json:"chainID,omitempty"`
}

func (m *Interest) Reset()                    { *m = Interest{} }
func (m *Interest) String() string            { return proto.CompactTextString(m) }
func (*Interest) ProtoMessage()               {}
func (*Interest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

type isInterest_RegInfo interface {
	isInterest_RegInfo()
}

type Interest_ChaincodeRegInfo struct {
	ChaincodeRegInfo *ChaincodeReg `protobuf:"bytes,2,opt,name=chaincode_reg_info,json=chaincodeRegInfo,oneof"`
}

func (*Interest_ChaincodeRegInfo) isInterest_RegInfo() {}

func (m *Interest) GetRegInfo() isInterest_RegInfo {
	if m != nil {
		return m.RegInfo
	}
	return nil
}

func (m *Interest) GetEventType() EventType {
	if m != nil {
		return m.EventType
	}
	return EventType_REGISTER
}

func (m *Interest) GetChaincodeRegInfo() *ChaincodeReg {
	if x, ok := m.GetRegInfo().(*Interest_ChaincodeRegInfo); ok {
		return x.ChaincodeRegInfo
	}
	return nil
}

func (m *Interest) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Interest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Interest_OneofMarshaler, _Interest_OneofUnmarshaler, _Interest_OneofSizer, []interface{}{
		(*Interest_ChaincodeRegInfo)(nil),
	}
}

func _Interest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Interest)
	// RegInfo
	switch x := m.RegInfo.(type) {
	case *Interest_ChaincodeRegInfo:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChaincodeRegInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Interest.RegInfo has unexpected type %T", x)
	}
	return nil
}

func _Interest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Interest)
	switch tag {
	case 2: // RegInfo.chaincode_reg_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChaincodeReg)
		err := b.DecodeMessage(msg)
		m.RegInfo = &Interest_ChaincodeRegInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Interest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Interest)
	// RegInfo
	switch x := m.RegInfo.(type) {
	case *Interest_ChaincodeRegInfo:
		s := proto.Size(x.ChaincodeRegInfo)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ---------- consumer events ---------
// Register is sent by consumers for registering events
// string type - "register"
type Register struct {
	Events []*Interest `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *Register) Reset()                    { *m = Register{} }
func (m *Register) String() string            { return proto.CompactTextString(m) }
func (*Register) ProtoMessage()               {}
func (*Register) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *Register) GetEvents() []*Interest {
	if m != nil {
		return m.Events
	}
	return nil
}

// Rejection is sent by consumers for erroneous transaction rejection events
// string type - "rejection"
type Rejection struct {
	Tx       *Transaction `protobuf:"bytes,1,opt,name=tx" json:"tx,omitempty"`
	ErrorMsg string       `protobuf:"bytes,2,opt,name=error_msg,json=errorMsg" json:"error_msg,omitempty"`
}

func (m *Rejection) Reset()                    { *m = Rejection{} }
func (m *Rejection) String() string            { return proto.CompactTextString(m) }
func (*Rejection) ProtoMessage()               {}
func (*Rejection) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *Rejection) GetTx() *Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *Rejection) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

// ---------- producer events ---------
type Unregister struct {
	Events []*Interest `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *Unregister) Reset()                    { *m = Unregister{} }
func (m *Unregister) String() string            { return proto.CompactTextString(m) }
func (*Unregister) ProtoMessage()               {}
func (*Unregister) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *Unregister) GetEvents() []*Interest {
	if m != nil {
		return m.Events
	}
	return nil
}

// FilteredBlock is sent by producers and contains minimal information
// about the block.
type FilteredBlock struct {
	ChannelId  string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	Number     uint64                 `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	FilteredTx []*FilteredTransaction `protobuf:"bytes,4,rep,name=filtered_tx,json=filteredTx" json:"filtered_tx,omitempty"`
}

func (m *FilteredBlock) Reset()                    { *m = FilteredBlock{} }
func (m *FilteredBlock) String() string            { return proto.CompactTextString(m) }
func (*FilteredBlock) ProtoMessage()               {}
func (*FilteredBlock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *FilteredBlock) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *FilteredBlock) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *FilteredBlock) GetFilteredTx() []*FilteredTransaction {
	if m != nil {
		return m.FilteredTx
	}
	return nil
}

// FilteredTransaction is a minimal set of information about a transaction
// within a block.
type FilteredTransaction struct {
	Txid             string            `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Type             common.HeaderType `protobuf:"varint,2,opt,name=type,enum=common.HeaderType" json:"type,omitempty"`
	TxValidationCode TxValidationCode  `protobuf:"varint,3,opt,name=tx_validation_code,json=txValidationCode,enum=protos.TxValidationCode" json:"tx_validation_code,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*FilteredTransaction_ProposalResponse
	Data isFilteredTransaction_Data `protobuf_oneof:"Data"`
}

func (m *FilteredTransaction) Reset()                    { *m = FilteredTransaction{} }
func (m *FilteredTransaction) String() string            { return proto.CompactTextString(m) }
func (*FilteredTransaction) ProtoMessage()               {}
func (*FilteredTransaction) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

type isFilteredTransaction_Data interface {
	isFilteredTransaction_Data()
}

type FilteredTransaction_ProposalResponse struct {
	ProposalResponse *FilteredProposalResponse `protobuf:"bytes,4,opt,name=proposal_response,json=proposalResponse,oneof"`
}

func (*FilteredTransaction_ProposalResponse) isFilteredTransaction_Data() {}

func (m *FilteredTransaction) GetData() isFilteredTransaction_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FilteredTransaction) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *FilteredTransaction) GetType() common.HeaderType {
	if m != nil {
		return m.Type
	}
	return common.HeaderType_MESSAGE
}

func (m *FilteredTransaction) GetTxValidationCode() TxValidationCode {
	if m != nil {
		return m.TxValidationCode
	}
	return TxValidationCode_VALID
}

func (m *FilteredTransaction) GetProposalResponse() *FilteredProposalResponse {
	if x, ok := m.GetData().(*FilteredTransaction_ProposalResponse); ok {
		return x.ProposalResponse
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*FilteredTransaction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _FilteredTransaction_OneofMarshaler, _FilteredTransaction_OneofUnmarshaler, _FilteredTransaction_OneofSizer, []interface{}{
		(*FilteredTransaction_ProposalResponse)(nil),
	}
}

func _FilteredTransaction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*FilteredTransaction)
	// Data
	switch x := m.Data.(type) {
	case *FilteredTransaction_ProposalResponse:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProposalResponse); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("FilteredTransaction.Data has unexpected type %T", x)
	}
	return nil
}

func _FilteredTransaction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*FilteredTransaction)
	switch tag {
	case 4: // Data.proposal_response
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FilteredProposalResponse)
		err := b.DecodeMessage(msg)
		m.Data = &FilteredTransaction_ProposalResponse{msg}
		return true, err
	default:
		return false, nil
	}
}

func _FilteredTransaction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*FilteredTransaction)
	// Data
	switch x := m.Data.(type) {
	case *FilteredTransaction_ProposalResponse:
		s := proto.Size(x.ProposalResponse)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// FilteredProposalResponse reciprocal of TransactionAction
// message from regular block
type FilteredProposalResponse struct {
	ChaincodeActions []*FilteredChaincodeAction `protobuf:"bytes,1,rep,name=chaincodeActions" json:"chaincodeActions,omitempty"`
}

func (m *FilteredProposalResponse) Reset()                    { *m = FilteredProposalResponse{} }
func (m *FilteredProposalResponse) String() string            { return proto.CompactTextString(m) }
func (*FilteredProposalResponse) ProtoMessage()               {}
func (*FilteredProposalResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *FilteredProposalResponse) GetChaincodeActions() []*FilteredChaincodeAction {
	if m != nil {
		return m.ChaincodeActions
	}
	return nil
}

// FilteredChaincodeAction is a minimal set of information about an action within a
// transaction.
type FilteredChaincodeAction struct {
	CcEvent *ChaincodeEvent `protobuf:"bytes,1,opt,name=ccEvent" json:"ccEvent,omitempty"`
}

func (m *FilteredChaincodeAction) Reset()                    { *m = FilteredChaincodeAction{} }
func (m *FilteredChaincodeAction) String() string            { return proto.CompactTextString(m) }
func (*FilteredChaincodeAction) ProtoMessage()               {}
func (*FilteredChaincodeAction) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *FilteredChaincodeAction) GetCcEvent() *ChaincodeEvent {
	if m != nil {
		return m.CcEvent
	}
	return nil
}

// SignedEvent is used for any communication between consumer and producer
type SignedEvent struct {
	// Signature over the event bytes
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// Marshal of Event object
	EventBytes []byte `protobuf:"bytes,2,opt,name=eventBytes,proto3" json:"eventBytes,omitempty"`
}

func (m *SignedEvent) Reset()                    { *m = SignedEvent{} }
func (m *SignedEvent) String() string            { return proto.CompactTextString(m) }
func (*SignedEvent) ProtoMessage()               {}
func (*SignedEvent) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *SignedEvent) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedEvent) GetEventBytes() []byte {
	if m != nil {
		return m.EventBytes
	}
	return nil
}

// Event is used by
//  - consumers (adapters) to send Register
//  - producer to advertise supported types and events
type Event struct {
	// Types that are valid to be assigned to Event:
	//	*Event_Register
	//	*Event_Block
	//	*Event_ChaincodeEvent
	//	*Event_Rejection
	//	*Event_Unregister
	//	*Event_FilteredBlock
	Event isEvent_Event `protobuf_oneof:"Event"`
	// Creator of the event, specified as a certificate chain
	Creator []byte `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	// Timestamp of the client - used to mitigate replay attacks
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=timestamp" json:"timestamp,omitempty"`
	// If mutual TLS is employed, this represents
	// the hash of the client's TLS certificate
	TlsCertHash []byte `protobuf:"bytes,9,opt,name=tls_cert_hash,json=tlsCertHash,proto3" json:"tls_cert_hash,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Register struct {
	Register *Register `protobuf:"bytes,1,opt,name=register,oneof"`
}
type Event_Block struct {
	Block *common.Block `protobuf:"bytes,2,opt,name=block,oneof"`
}
type Event_ChaincodeEvent struct {
	ChaincodeEvent *ChaincodeEvent `protobuf:"bytes,3,opt,name=chaincode_event,json=chaincodeEvent,oneof"`
}
type Event_Rejection struct {
	Rejection *Rejection `protobuf:"bytes,4,opt,name=rejection,oneof"`
}
type Event_Unregister struct {
	Unregister *Unregister `protobuf:"bytes,5,opt,name=unregister,oneof"`
}
type Event_FilteredBlock struct {
	FilteredBlock *FilteredBlock `protobuf:"bytes,7,opt,name=filtered_block,json=filteredBlock,oneof"`
}

func (*Event_Register) isEvent_Event()       {}
func (*Event_Block) isEvent_Event()          {}
func (*Event_ChaincodeEvent) isEvent_Event() {}
func (*Event_Rejection) isEvent_Event()      {}
func (*Event_Unregister) isEvent_Event()     {}
func (*Event_FilteredBlock) isEvent_Event()  {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetRegister() *Register {
	if x, ok := m.GetEvent().(*Event_Register); ok {
		return x.Register
	}
	return nil
}

func (m *Event) GetBlock() *common.Block {
	if x, ok := m.GetEvent().(*Event_Block); ok {
		return x.Block
	}
	return nil
}

func (m *Event) GetChaincodeEvent() *ChaincodeEvent {
	if x, ok := m.GetEvent().(*Event_ChaincodeEvent); ok {
		return x.ChaincodeEvent
	}
	return nil
}

func (m *Event) GetRejection() *Rejection {
	if x, ok := m.GetEvent().(*Event_Rejection); ok {
		return x.Rejection
	}
	return nil
}

func (m *Event) GetUnregister() *Unregister {
	if x, ok := m.GetEvent().(*Event_Unregister); ok {
		return x.Unregister
	}
	return nil
}

func (m *Event) GetFilteredBlock() *FilteredBlock {
	if x, ok := m.GetEvent().(*Event_FilteredBlock); ok {
		return x.FilteredBlock
	}
	return nil
}

func (m *Event) GetCreator() []byte {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *Event) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Event) GetTlsCertHash() []byte {
	if m != nil {
		return m.TlsCertHash
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_Register)(nil),
		(*Event_Block)(nil),
		(*Event_ChaincodeEvent)(nil),
		(*Event_Rejection)(nil),
		(*Event_Unregister)(nil),
		(*Event_FilteredBlock)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// Event
	switch x := m.Event.(type) {
	case *Event_Register:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Register); err != nil {
			return err
		}
	case *Event_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *Event_ChaincodeEvent:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ChaincodeEvent); err != nil {
			return err
		}
	case *Event_Rejection:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rejection); err != nil {
			return err
		}
	case *Event_Unregister:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unregister); err != nil {
			return err
		}
	case *Event_FilteredBlock:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FilteredBlock); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Event has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 1: // Event.register
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Register)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Register{msg}
		return true, err
	case 2: // Event.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.Block)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Block{msg}
		return true, err
	case 3: // Event.chaincode_event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ChaincodeEvent)
		err := b.DecodeMessage(msg)
		m.Event = &Event_ChaincodeEvent{msg}
		return true, err
	case 4: // Event.rejection
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Rejection)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Rejection{msg}
		return true, err
	case 5: // Event.unregister
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Unregister)
		err := b.DecodeMessage(msg)
		m.Event = &Event_Unregister{msg}
		return true, err
	case 7: // Event.filtered_block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FilteredBlock)
		err := b.DecodeMessage(msg)
		m.Event = &Event_FilteredBlock{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// Event
	switch x := m.Event.(type) {
	case *Event_Register:
		s := proto.Size(x.Register)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ChaincodeEvent:
		s := proto.Size(x.ChaincodeEvent)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Rejection:
		s := proto.Size(x.Rejection)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Unregister:
		s := proto.Size(x.Unregister)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_FilteredBlock:
		s := proto.Size(x.FilteredBlock)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// DeliverResponse
type DeliverResponse struct {
	// Types that are valid to be assigned to Type:
	//	*DeliverResponse_Status
	//	*DeliverResponse_Block
	//	*DeliverResponse_FilteredBlock
	Type isDeliverResponse_Type `protobuf_oneof:"Type"`
}

func (m *DeliverResponse) Reset()                    { *m = DeliverResponse{} }
func (m *DeliverResponse) String() string            { return proto.CompactTextString(m) }
func (*DeliverResponse) ProtoMessage()               {}
func (*DeliverResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

type isDeliverResponse_Type interface {
	isDeliverResponse_Type()
}

type DeliverResponse_Status struct {
	Status common.Status `protobuf:"varint,1,opt,name=status,enum=common.Status,oneof"`
}
type DeliverResponse_Block struct {
	Block *common.Block `protobuf:"bytes,2,opt,name=block,oneof"`
}
type DeliverResponse_FilteredBlock struct {
	FilteredBlock *FilteredBlock `protobuf:"bytes,3,opt,name=filtered_block,json=filteredBlock,oneof"`
}

func (*DeliverResponse_Status) isDeliverResponse_Type()        {}
func (*DeliverResponse_Block) isDeliverResponse_Type()         {}
func (*DeliverResponse_FilteredBlock) isDeliverResponse_Type() {}

func (m *DeliverResponse) GetType() isDeliverResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DeliverResponse) GetStatus() common.Status {
	if x, ok := m.GetType().(*DeliverResponse_Status); ok {
		return x.Status
	}
	return common.Status_UNKNOWN
}

func (m *DeliverResponse) GetBlock() *common.Block {
	if x, ok := m.GetType().(*DeliverResponse_Block); ok {
		return x.Block
	}
	return nil
}

func (m *DeliverResponse) GetFilteredBlock() *FilteredBlock {
	if x, ok := m.GetType().(*DeliverResponse_FilteredBlock); ok {
		return x.FilteredBlock
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeliverResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeliverResponse_OneofMarshaler, _DeliverResponse_OneofUnmarshaler, _DeliverResponse_OneofSizer, []interface{}{
		(*DeliverResponse_Status)(nil),
		(*DeliverResponse_Block)(nil),
		(*DeliverResponse_FilteredBlock)(nil),
	}
}

func _DeliverResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeliverResponse)
	// Type
	switch x := m.Type.(type) {
	case *DeliverResponse_Status:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Status))
	case *DeliverResponse_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *DeliverResponse_FilteredBlock:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FilteredBlock); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DeliverResponse.Type has unexpected type %T", x)
	}
	return nil
}

func _DeliverResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeliverResponse)
	switch tag {
	case 1: // Type.status
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &DeliverResponse_Status{common.Status(x)}
		return true, err
	case 2: // Type.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.Block)
		err := b.DecodeMessage(msg)
		m.Type = &DeliverResponse_Block{msg}
		return true, err
	case 3: // Type.filtered_block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FilteredBlock)
		err := b.DecodeMessage(msg)
		m.Type = &DeliverResponse_FilteredBlock{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DeliverResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeliverResponse)
	// Type
	switch x := m.Type.(type) {
	case *DeliverResponse_Status:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Status))
	case *DeliverResponse_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DeliverResponse_FilteredBlock:
		s := proto.Size(x.FilteredBlock)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ChaincodeReg)(nil), "protos.ChaincodeReg")
	proto.RegisterType((*Interest)(nil), "protos.Interest")
	proto.RegisterType((*Register)(nil), "protos.Register")
	proto.RegisterType((*Rejection)(nil), "protos.Rejection")
	proto.RegisterType((*Unregister)(nil), "protos.Unregister")
	proto.RegisterType((*FilteredBlock)(nil), "protos.FilteredBlock")
	proto.RegisterType((*FilteredTransaction)(nil), "protos.FilteredTransaction")
	proto.RegisterType((*FilteredProposalResponse)(nil), "protos.FilteredProposalResponse")
	proto.RegisterType((*FilteredChaincodeAction)(nil), "protos.FilteredChaincodeAction")
	proto.RegisterType((*SignedEvent)(nil), "protos.SignedEvent")
	proto.RegisterType((*Event)(nil), "protos.Event")
	proto.RegisterType((*DeliverResponse)(nil), "protos.DeliverResponse")
	proto.RegisterEnum("protos.EventType", EventType_name, EventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Events service

type EventsClient interface {
	// event chatting using Event
	Chat(ctx context.Context, opts ...grpc.CallOption) (Events_ChatClient, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Events_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Events_serviceDesc.Streams[0], c.cc, "/protos.Events/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsChatClient{stream}
	return x, nil
}

type Events_ChatClient interface {
	Send(*SignedEvent) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventsChatClient struct {
	grpc.ClientStream
}

func (x *eventsChatClient) Send(m *SignedEvent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventsChatClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Events service

type EventsServer interface {
	// event chatting using Event
	Chat(Events_ChatServer) error
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsServer).Chat(&eventsChatServer{stream})
}

type Events_ChatServer interface {
	Send(*Event) error
	Recv() (*SignedEvent, error)
	grpc.ServerStream
}

type eventsChatServer struct {
	grpc.ServerStream
}

func (x *eventsChatServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventsChatServer) Recv() (*SignedEvent, error) {
	m := new(SignedEvent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Events",
	HandlerType: (*EventsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Events_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "peer/events.proto",
}

// Client API for Deliver service

type DeliverClient interface {
	// deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with Payload data as a marshaled orderer.SeekInfo message,
	// then a stream of block replies is received.
	Deliver(ctx context.Context, opts ...grpc.CallOption) (Deliver_DeliverClient, error)
	// deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with Payload data as a marshaled orderer.SeekInfo message,
	// then a stream of **filtered** block replies is received.
	DeliverFiltered(ctx context.Context, opts ...grpc.CallOption) (Deliver_DeliverFilteredClient, error)
}

type deliverClient struct {
	cc *grpc.ClientConn
}

func NewDeliverClient(cc *grpc.ClientConn) DeliverClient {
	return &deliverClient{cc}
}

func (c *deliverClient) Deliver(ctx context.Context, opts ...grpc.CallOption) (Deliver_DeliverClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Deliver_serviceDesc.Streams[0], c.cc, "/protos.Deliver/Deliver", opts...)
	if err != nil {
		return nil, err
	}
	x := &deliverDeliverClient{stream}
	return x, nil
}

type Deliver_DeliverClient interface {
	Send(*common.Envelope) error
	Recv() (*DeliverResponse, error)
	grpc.ClientStream
}

type deliverDeliverClient struct {
	grpc.ClientStream
}

func (x *deliverDeliverClient) Send(m *common.Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deliverDeliverClient) Recv() (*DeliverResponse, error) {
	m := new(DeliverResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deliverClient) DeliverFiltered(ctx context.Context, opts ...grpc.CallOption) (Deliver_DeliverFilteredClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Deliver_serviceDesc.Streams[1], c.cc, "/protos.Deliver/DeliverFiltered", opts...)
	if err != nil {
		return nil, err
	}
	x := &deliverDeliverFilteredClient{stream}
	return x, nil
}

type Deliver_DeliverFilteredClient interface {
	Send(*common.Envelope) error
	Recv() (*DeliverResponse, error)
	grpc.ClientStream
}

type deliverDeliverFilteredClient struct {
	grpc.ClientStream
}

func (x *deliverDeliverFilteredClient) Send(m *common.Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deliverDeliverFilteredClient) Recv() (*DeliverResponse, error) {
	m := new(DeliverResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Deliver service

type DeliverServer interface {
	// deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with Payload data as a marshaled orderer.SeekInfo message,
	// then a stream of block replies is received.
	Deliver(Deliver_DeliverServer) error
	// deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with Payload data as a marshaled orderer.SeekInfo message,
	// then a stream of **filtered** block replies is received.
	DeliverFiltered(Deliver_DeliverFilteredServer) error
}

func RegisterDeliverServer(s *grpc.Server, srv DeliverServer) {
	s.RegisterService(&_Deliver_serviceDesc, srv)
}

func _Deliver_Deliver_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeliverServer).Deliver(&deliverDeliverServer{stream})
}

type Deliver_DeliverServer interface {
	Send(*DeliverResponse) error
	Recv() (*common.Envelope, error)
	grpc.ServerStream
}

type deliverDeliverServer struct {
	grpc.ServerStream
}

func (x *deliverDeliverServer) Send(m *DeliverResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deliverDeliverServer) Recv() (*common.Envelope, error) {
	m := new(common.Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Deliver_DeliverFiltered_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeliverServer).DeliverFiltered(&deliverDeliverFilteredServer{stream})
}

type Deliver_DeliverFilteredServer interface {
	Send(*DeliverResponse) error
	Recv() (*common.Envelope, error)
	grpc.ServerStream
}

type deliverDeliverFilteredServer struct {
	grpc.ServerStream
}

func (x *deliverDeliverFilteredServer) Send(m *DeliverResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deliverDeliverFilteredServer) Recv() (*common.Envelope, error) {
	m := new(common.Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Deliver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Deliver",
	HandlerType: (*DeliverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Deliver",
			Handler:       _Deliver_Deliver_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeliverFiltered",
			Handler:       _Deliver_DeliverFiltered_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "peer/events.proto",
}

func init() { proto.RegisterFile("peer/events.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1011 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x8e, 0xdb, 0x34, 0x89, 0x4f, 0x9a, 0x6e, 0x3a, 0x85, 0xae, 0x95, 0x05, 0xb6, 0x18, 0x81,
	0x02, 0x17, 0x49, 0x09, 0x2b, 0x84, 0x56, 0x08, 0xa9, 0xf9, 0x29, 0x0e, 0xdd, 0x6d, 0xab, 0x69,
	0x96, 0x0b, 0x2e, 0xb0, 0x26, 0xce, 0xc4, 0x31, 0xeb, 0xd8, 0xd6, 0xcc, 0xa4, 0x4a, 0xef, 0xb9,
	0xe1, 0x49, 0x90, 0x78, 0x15, 0xde, 0x86, 0x27, 0x40, 0x1e, 0xcf, 0xd8, 0x69, 0x4a, 0x25, 0x7a,
	0x65, 0xcf, 0x39, 0xdf, 0xf9, 0xfd, 0xce, 0x19, 0x1b, 0x0e, 0x13, 0x4a, 0x59, 0x97, 0xde, 0xd2,
	0x48, 0xf0, 0x4e, 0xc2, 0x62, 0x11, 0xa3, 0x8a, 0x7c, 0xf0, 0xd6, 0x91, 0x17, 0x2f, 0x97, 0x71,
	0xd4, 0xcd, 0x1e, 0x99, 0xb2, 0xf5, 0xd2, 0x8f, 0x63, 0x3f, 0xa4, 0x5d, 0x79, 0x9a, 0xae, 0xe6,
	0x5d, 0x11, 0x2c, 0x29, 0x17, 0x64, 0x99, 0x28, 0x40, 0x4b, 0x3a, 0xf4, 0x16, 0x24, 0x88, 0xbc,
	0x78, 0x46, 0x5d, 0xe9, 0x5a, 0xe9, 0x8e, 0xa5, 0x4e, 0x30, 0x12, 0x71, 0xe2, 0x89, 0x40, 0x3b,
	0xb5, 0xaf, 0x61, 0x7f, 0xa0, 0x0d, 0x30, 0xf5, 0xd1, 0xa7, 0xb0, 0x5f, 0x38, 0x08, 0x66, 0x96,
	0x71, 0x62, 0xb4, 0x4d, 0x5c, 0xcf, 0x65, 0xe3, 0x19, 0xfa, 0x18, 0x40, 0x7a, 0x76, 0x23, 0xb2,
	0xa4, 0xd6, 0x8e, 0x04, 0x98, 0x52, 0x72, 0x49, 0x96, 0xd4, 0xfe, 0xd3, 0x80, 0xda, 0x38, 0x12,
	0x94, 0x51, 0x2e, 0xd0, 0xa9, 0xc6, 0x8a, 0xbb, 0x84, 0x4a, 0x67, 0x07, 0xbd, 0xc3, 0x2c, 0x34,
	0xef, 0x8c, 0x52, 0xcd, 0xe4, 0x2e, 0xa1, 0xca, 0x3c, 0x7d, 0x45, 0x43, 0x40, 0x45, 0x02, 0x8c,
	0xfa, 0x6e, 0x10, 0xcd, 0x63, 0x19, 0xa5, 0xde, 0xfb, 0x40, 0x5b, 0x6e, 0xa6, 0xec, 0x94, 0x70,
	0xd3, 0xdb, 0x38, 0x8f, 0xa3, 0x79, 0x8c, 0x2c, 0xa8, 0x4a, 0xd9, 0x78, 0x68, 0xed, 0xca, 0x04,
	0xf5, 0xb1, 0x6f, 0x42, 0x55, 0x81, 0xec, 0x57, 0x50, 0xc3, 0xd4, 0x0f, 0xb8, 0xa0, 0x0c, 0xb5,
	0xa1, 0x92, 0x31, 0x61, 0x19, 0x27, 0xbb, 0xed, 0x7a, 0xaf, 0xa9, 0x43, 0xe9, 0x52, 0xb0, 0xd2,
	0xdb, 0x6f, 0xc1, 0xc4, 0xf4, 0x37, 0x2a, 0x9b, 0x88, 0x3e, 0x83, 0x1d, 0xb1, 0x96, 0x75, 0xd5,
	0x7b, 0x47, 0xda, 0x64, 0x52, 0x74, 0x19, 0xef, 0x88, 0x35, 0x7a, 0x01, 0x26, 0x65, 0x2c, 0x66,
	0xee, 0x92, 0xfb, 0xaa, 0x5f, 0x35, 0x29, 0x78, 0xcb, 0x7d, 0xfb, 0x5b, 0x80, 0x77, 0x11, 0x7b,
	0x7a, 0x1a, 0xbf, 0x1b, 0xd0, 0x38, 0x0f, 0xc2, 0x54, 0x3a, 0xeb, 0x87, 0xb1, 0xf7, 0x3e, 0xe5,
	0xc5, 0x5b, 0x90, 0x28, 0xa2, 0x61, 0x41, 0x9c, 0xa9, 0x24, 0xe3, 0x19, 0x3a, 0x86, 0x4a, 0xb4,
	0x5a, 0x4e, 0x29, 0x93, 0x29, 0x94, 0xb1, 0x3a, 0xa1, 0xef, 0xa1, 0x3e, 0x57, 0x7e, 0x5c, 0xb1,
	0xb6, 0xca, 0x32, 0xee, 0x0b, 0x1d, 0x57, 0x87, 0xd8, 0xac, 0x09, 0x34, 0x7e, 0xb2, 0xb6, 0xff,
	0x31, 0xe0, 0xe8, 0x3f, 0x30, 0x08, 0x41, 0x59, 0xac, 0xf3, 0x34, 0xe4, 0x3b, 0xfa, 0x02, 0xca,
	0x72, 0x0c, 0x76, 0xe4, 0x18, 0xa0, 0x8e, 0x9a, 0x6e, 0x87, 0x92, 0x19, 0x65, 0x72, 0x0e, 0xa4,
	0x1e, 0x9d, 0x03, 0x12, 0x6b, 0xf7, 0x96, 0x84, 0xc1, 0x8c, 0xa4, 0xce, 0xdc, 0x94, 0x59, 0xc9,
	0xe3, 0x41, 0xcf, 0xca, 0x9b, 0xbc, 0xfe, 0x39, 0x07, 0x0c, 0x52, 0xe6, 0x9b, 0x62, 0x4b, 0x82,
	0xae, 0xe0, 0x30, 0x61, 0x71, 0x12, 0x73, 0x12, 0xba, 0x8c, 0xf2, 0x24, 0x8e, 0x38, 0xb5, 0xca,
	0x92, 0xab, 0x93, 0xed, 0xfa, 0xae, 0x15, 0x10, 0x2b, 0x5c, 0x3a, 0x55, 0xc9, 0x96, 0xac, 0x5f,
	0x81, 0xf2, 0x90, 0x08, 0x62, 0xfb, 0x60, 0x3d, 0x66, 0x87, 0x2e, 0xa0, 0x98, 0xc6, 0x33, 0xd9,
	0x0b, 0xcd, 0xe5, 0xcb, 0xed, 0x98, 0x83, 0xfb, 0x38, 0xfc, 0xc0, 0xd0, 0xbe, 0x80, 0xe7, 0x8f,
	0x80, 0xd1, 0x29, 0x54, 0x3d, 0x4f, 0x6e, 0x90, 0x1a, 0xbf, 0xe3, 0x07, 0xcb, 0x21, 0xb5, 0x58,
	0xc3, 0xec, 0x0b, 0xa8, 0xdf, 0x04, 0x7e, 0x44, 0x67, 0xf2, 0x88, 0x3e, 0x02, 0x93, 0x07, 0x7e,
	0x44, 0xc4, 0x8a, 0x65, 0x9b, 0xb9, 0x8f, 0x0b, 0x01, 0xfa, 0x44, 0x2d, 0x6e, 0xff, 0x4e, 0x50,
	0x2e, 0x19, 0xdb, 0xc7, 0x1b, 0x12, 0xfb, 0xef, 0x5d, 0xd8, 0xcb, 0xfc, 0x74, 0xa0, 0xa6, 0xc7,
	0x57, 0x65, 0x92, 0x0f, 0xad, 0xde, 0x2e, 0xa7, 0x84, 0x73, 0x0c, 0xfa, 0x1c, 0xf6, 0xa6, 0xe9,
	0xbc, 0xaa, 0x9d, 0x6e, 0xe8, 0x31, 0x90, 0x43, 0xec, 0x94, 0x70, 0xa6, 0x45, 0x67, 0xf0, 0x6c,
	0xeb, 0x26, 0x93, 0x13, 0xf0, 0x68, 0x9d, 0x4e, 0x09, 0x1f, 0x78, 0xf7, 0x24, 0xe8, 0x6b, 0x30,
	0x99, 0xde, 0x54, 0xc5, 0xfb, 0x61, 0x91, 0x9a, 0x52, 0x38, 0x25, 0x5c, 0xa0, 0xd0, 0x2b, 0x80,
	0x55, 0xbe, 0x8d, 0xd6, 0x9e, 0xb4, 0x41, 0xda, 0xa6, 0xd8, 0x53, 0xa7, 0x84, 0x37, 0x70, 0xe8,
	0x07, 0x38, 0xc8, 0x57, 0x28, 0xab, 0xad, 0x2a, 0x2d, 0x3f, 0xdc, 0x66, 0x5c, 0xd7, 0xd8, 0x98,
	0xdf, 0xdb, 0xdc, 0xf4, 0xb6, 0x62, 0x94, 0x88, 0x98, 0x59, 0x15, 0xd9, 0x69, 0x7d, 0x44, 0xdf,
	0x81, 0x99, 0xdf, 0xf2, 0x56, 0x4d, 0x3a, 0x6d, 0x75, 0xb2, 0xef, 0x40, 0x47, 0x7f, 0x07, 0x3a,
	0x13, 0x8d, 0xc0, 0x05, 0x18, 0xd9, 0xd0, 0x10, 0x21, 0x77, 0x3d, 0xca, 0x84, 0xbb, 0x20, 0x7c,
	0x61, 0x99, 0xd2, 0x73, 0x5d, 0x84, 0x7c, 0x40, 0x99, 0x70, 0x08, 0x5f, 0xf4, 0xab, 0x8a, 0x43,
	0xfb, 0x2f, 0x03, 0x9e, 0x0d, 0x69, 0x18, 0xdc, 0x52, 0x96, 0x0f, 0x72, 0x1b, 0x2a, 0x5c, 0x10,
	0xb1, 0xe2, 0xea, 0xda, 0x3e, 0xd0, 0x44, 0xdd, 0x48, 0xa9, 0x53, 0xc2, 0x4a, 0xff, 0x7f, 0x19,
	0x7d, 0xd8, 0xa5, 0xdd, 0xa7, 0x74, 0x29, 0xdd, 0xbe, 0xf4, 0x92, 0xf8, 0xea, 0x1d, 0x98, 0xf9,
	0x97, 0x03, 0xed, 0x43, 0x0d, 0x8f, 0x7e, 0x1c, 0xdf, 0x4c, 0x46, 0xb8, 0x59, 0x42, 0x26, 0xec,
	0xf5, 0xdf, 0x5c, 0x0d, 0x2e, 0x9a, 0x06, 0x6a, 0x80, 0x39, 0x70, 0xce, 0xc6, 0x97, 0x83, 0xab,
	0xe1, 0xa8, 0xb9, 0x93, 0x1e, 0xf1, 0xe8, 0xa7, 0xd1, 0x60, 0x32, 0xbe, 0xba, 0x6c, 0xee, 0xa2,
	0x43, 0x68, 0x9c, 0x8f, 0xdf, 0x4c, 0x46, 0x78, 0x34, 0xcc, 0x0c, 0xca, 0xbd, 0xd7, 0x50, 0x91,
	0x6e, 0x39, 0x3a, 0x85, 0xf2, 0x60, 0x41, 0x04, 0xca, 0x2f, 0xf4, 0x8d, 0xb5, 0x69, 0x35, 0xee,
	0x7d, 0xbd, 0xec, 0x52, 0xdb, 0x38, 0x35, 0x7a, 0x7f, 0x18, 0x50, 0x55, 0xfd, 0x43, 0xaf, 0x8b,
	0xd7, 0xa6, 0xee, 0xc4, 0x28, 0xba, 0xa5, 0x61, 0x9c, 0xd0, 0xd6, 0x73, 0x6d, 0xbd, 0xd5, 0xed,
	0xcc, 0x0f, 0xea, 0xe7, 0x34, 0xe8, 0x5e, 0x3c, 0xd9, 0x47, 0xff, 0x57, 0xb0, 0x63, 0xe6, 0x77,
	0x16, 0x77, 0x09, 0x65, 0x21, 0x9d, 0xf9, 0x94, 0x75, 0xe6, 0x64, 0xca, 0x02, 0x4f, 0x9b, 0xa5,
	0x7f, 0x02, 0xfd, 0x46, 0x56, 0xeb, 0x35, 0xf1, 0xde, 0x13, 0x9f, 0xfe, 0xf2, 0xa5, 0x1f, 0x88,
	0xc5, 0x6a, 0x9a, 0xc6, 0xea, 0x6e, 0x58, 0x76, 0x33, 0xcb, 0xec, 0x97, 0x83, 0x77, 0x53, 0xcb,
	0x69, 0xf6, 0x8f, 0xf2, 0xcd, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x83, 0x4c, 0xd5, 0xcb, 0xbf,
	0x08, 0x00, 0x00,
}
