// Code generated by protoc-gen-go.
// source: peer/fabric.proto
// DO NOT EDIT!

package peer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Transaction_Type int32

const (
	Transaction_UNDEFINED Transaction_Type = 0
	// deploy a chaincode to the network and call `Init` function
	Transaction_CHAINCODE_DEPLOY Transaction_Type = 1
	// call a chaincode `Invoke` function as a transaction
	Transaction_CHAINCODE_INVOKE Transaction_Type = 2
	// call a chaincode `query` function
	Transaction_CHAINCODE_QUERY Transaction_Type = 3
	// terminate a chaincode; not implemented yet
	Transaction_CHAINCODE_TERMINATE Transaction_Type = 4
)

var Transaction_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "CHAINCODE_DEPLOY",
	2: "CHAINCODE_INVOKE",
	3: "CHAINCODE_QUERY",
	4: "CHAINCODE_TERMINATE",
}
var Transaction_Type_value = map[string]int32{
	"UNDEFINED":           0,
	"CHAINCODE_DEPLOY":    1,
	"CHAINCODE_INVOKE":    2,
	"CHAINCODE_QUERY":     3,
	"CHAINCODE_TERMINATE": 4,
}

func (x Transaction_Type) String() string {
	return proto.EnumName(Transaction_Type_name, int32(x))
}
func (Transaction_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{0, 0} }

type PeerEndpoint_Type int32

const (
	PeerEndpoint_UNDEFINED     PeerEndpoint_Type = 0
	PeerEndpoint_VALIDATOR     PeerEndpoint_Type = 1
	PeerEndpoint_NON_VALIDATOR PeerEndpoint_Type = 2
)

var PeerEndpoint_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "VALIDATOR",
	2: "NON_VALIDATOR",
}
var PeerEndpoint_Type_value = map[string]int32{
	"UNDEFINED":     0,
	"VALIDATOR":     1,
	"NON_VALIDATOR": 2,
}

func (x PeerEndpoint_Type) String() string {
	return proto.EnumName(PeerEndpoint_Type_name, int32(x))
}
func (PeerEndpoint_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor9, []int{8, 0} }

// Transaction defines a function call to a contract.
// `args` is an array of type string so that the chaincode writer can choose
// whatever format they wish for the arguments for their chaincode.
// For example, they may wish to use JSON, XML, or a custom format.
// TODO: Defined remaining fields.
type Transaction struct {
	Type Transaction_Type `protobuf:"varint,1,opt,name=type,enum=protos.Transaction_Type" json:"type,omitempty"`
	// store ChaincodeID as bytes so its encrypted value can be stored
	ChaincodeID                    []byte                     `protobuf:"bytes,2,opt,name=chaincodeID,proto3" json:"chaincodeID,omitempty"`
	Payload                        []byte                     `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Metadata                       []byte                     `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Txid                           string                     `protobuf:"bytes,5,opt,name=txid" json:"txid,omitempty"`
	Timestamp                      *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	ConfidentialityLevel           ConfidentialityLevel       `protobuf:"varint,7,opt,name=confidentialityLevel,enum=protos.ConfidentialityLevel" json:"confidentialityLevel,omitempty"`
	ConfidentialityProtocolVersion string                     `protobuf:"bytes,8,opt,name=confidentialityProtocolVersion" json:"confidentialityProtocolVersion,omitempty"`
	Nonce                          []byte                     `protobuf:"bytes,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ToValidators                   []byte                     `protobuf:"bytes,10,opt,name=toValidators,proto3" json:"toValidators,omitempty"`
	Cert                           []byte                     `protobuf:"bytes,11,opt,name=cert,proto3" json:"cert,omitempty"`
	Signature                      []byte                     `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *Transaction) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// TransactionBlock carries a batch of transactions.
type TransactionBlock struct {
	Transactions []*Transaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *TransactionBlock) Reset()                    { *m = TransactionBlock{} }
func (m *TransactionBlock) String() string            { return proto.CompactTextString(m) }
func (*TransactionBlock) ProtoMessage()               {}
func (*TransactionBlock) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *TransactionBlock) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// TransactionResult contains the return value of a transaction. It does
// not track potential state changes that were a result of the transaction.
// txid - The unique identifier of this transaction.
// result - The return value of the transaction.
// errorCode - An error code. 5xx will be logged as a failure in the dashboard.
// error - An error string for logging an issue.
// chaincodeEvent - any event emitted by a transaction
type TransactionResult struct {
	Txid           string          `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Result         []byte          `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode      uint32          `protobuf:"varint,3,opt,name=errorCode" json:"errorCode,omitempty"`
	Error          string          `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	ChaincodeEvent *ChaincodeEvent `protobuf:"bytes,5,opt,name=chaincodeEvent" json:"chaincodeEvent,omitempty"`
}

func (m *TransactionResult) Reset()                    { *m = TransactionResult{} }
func (m *TransactionResult) String() string            { return proto.CompactTextString(m) }
func (*TransactionResult) ProtoMessage()               {}
func (*TransactionResult) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{2} }

func (m *TransactionResult) GetChaincodeEvent() *ChaincodeEvent {
	if m != nil {
		return m.ChaincodeEvent
	}
	return nil
}

// Block carries The data that describes a block in the blockchain.
// version - Version used to track any protocol changes.
// timestamp - The time at which the block or transaction order
// was proposed. This may not be used by all consensus modules.
// transactions - The ordered list of transactions in the block.
// stateHash - The state hash after running transactions in this block.
// previousBlockHash - The hash of the previous block in the chain.
// consensusMetadata - Consensus modules may optionally store any
// additional metadata in this field.
// nonHashData - Data stored with the block, but not included in the blocks
// hash. This allows this data to be different per peer or discarded without
// impacting the blockchain.
type Block struct {
	Version           uint32                     `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Timestamp         *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Transactions      []*Transaction             `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
	StateHash         []byte                     `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	PreviousBlockHash []byte                     `protobuf:"bytes,5,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
	ConsensusMetadata []byte                     `protobuf:"bytes,6,opt,name=consensusMetadata,proto3" json:"consensusMetadata,omitempty"`
	NonHashData       *NonHashData               `protobuf:"bytes,7,opt,name=nonHashData" json:"nonHashData,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{3} }

func (m *Block) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Block) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetNonHashData() *NonHashData {
	if m != nil {
		return m.NonHashData
	}
	return nil
}

// Contains information about the blockchain ledger such as height, current
// block hash, and previous block hash.
type BlockchainInfo struct {
	Height            uint64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	CurrentBlockHash  []byte `protobuf:"bytes,2,opt,name=currentBlockHash,proto3" json:"currentBlockHash,omitempty"`
	PreviousBlockHash []byte `protobuf:"bytes,3,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
}

func (m *BlockchainInfo) Reset()                    { *m = BlockchainInfo{} }
func (m *BlockchainInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockchainInfo) ProtoMessage()               {}
func (*BlockchainInfo) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{4} }

// NonHashData is data that is recorded on the block, but not included in
// the block hash when verifying the blockchain.
// localLedgerCommitTimestamp - The time at which the block was added
// to the ledger on the local peer.
// chaincodeEvent - is an array ChaincodeEvents, one per transaction in the
// block
type NonHashData struct {
	LocalLedgerCommitTimestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=localLedgerCommitTimestamp" json:"localLedgerCommitTimestamp,omitempty"`
	ChaincodeEvents            []*ChaincodeEvent          `protobuf:"bytes,2,rep,name=chaincodeEvents" json:"chaincodeEvents,omitempty"`
}

func (m *NonHashData) Reset()                    { *m = NonHashData{} }
func (m *NonHashData) String() string            { return proto.CompactTextString(m) }
func (*NonHashData) ProtoMessage()               {}
func (*NonHashData) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{5} }

func (m *NonHashData) GetLocalLedgerCommitTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.LocalLedgerCommitTimestamp
	}
	return nil
}

func (m *NonHashData) GetChaincodeEvents() []*ChaincodeEvent {
	if m != nil {
		return m.ChaincodeEvents
	}
	return nil
}

type PeerAddress struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *PeerAddress) Reset()                    { *m = PeerAddress{} }
func (m *PeerAddress) String() string            { return proto.CompactTextString(m) }
func (*PeerAddress) ProtoMessage()               {}
func (*PeerAddress) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{6} }

type PeerID struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *PeerID) Reset()                    { *m = PeerID{} }
func (m *PeerID) String() string            { return proto.CompactTextString(m) }
func (*PeerID) ProtoMessage()               {}
func (*PeerID) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{7} }

type PeerEndpoint struct {
	ID      *PeerID           `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Address string            `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Type    PeerEndpoint_Type `protobuf:"varint,3,opt,name=type,enum=protos.PeerEndpoint_Type" json:"type,omitempty"`
	PkiID   []byte            `protobuf:"bytes,4,opt,name=pkiID,proto3" json:"pkiID,omitempty"`
}

func (m *PeerEndpoint) Reset()                    { *m = PeerEndpoint{} }
func (m *PeerEndpoint) String() string            { return proto.CompactTextString(m) }
func (*PeerEndpoint) ProtoMessage()               {}
func (*PeerEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{8} }

func (m *PeerEndpoint) GetID() *PeerID {
	if m != nil {
		return m.ID
	}
	return nil
}

type PeersMessage struct {
	Peers []*PeerEndpoint `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *PeersMessage) Reset()                    { *m = PeersMessage{} }
func (m *PeersMessage) String() string            { return proto.CompactTextString(m) }
func (*PeersMessage) ProtoMessage()               {}
func (*PeersMessage) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{9} }

func (m *PeersMessage) GetPeers() []*PeerEndpoint {
	if m != nil {
		return m.Peers
	}
	return nil
}

type PeersAddresses struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *PeersAddresses) Reset()                    { *m = PeersAddresses{} }
func (m *PeersAddresses) String() string            { return proto.CompactTextString(m) }
func (*PeersAddresses) ProtoMessage()               {}
func (*PeersAddresses) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{10} }

func init() {
	proto.RegisterType((*Transaction)(nil), "protos.Transaction")
	proto.RegisterType((*TransactionBlock)(nil), "protos.TransactionBlock")
	proto.RegisterType((*TransactionResult)(nil), "protos.TransactionResult")
	proto.RegisterType((*Block)(nil), "protos.Block")
	proto.RegisterType((*BlockchainInfo)(nil), "protos.BlockchainInfo")
	proto.RegisterType((*NonHashData)(nil), "protos.NonHashData")
	proto.RegisterType((*PeerAddress)(nil), "protos.PeerAddress")
	proto.RegisterType((*PeerID)(nil), "protos.PeerID")
	proto.RegisterType((*PeerEndpoint)(nil), "protos.PeerEndpoint")
	proto.RegisterType((*PeersMessage)(nil), "protos.PeersMessage")
	proto.RegisterType((*PeersAddresses)(nil), "protos.PeersAddresses")
	proto.RegisterEnum("protos.Transaction_Type", Transaction_Type_name, Transaction_Type_value)
	proto.RegisterEnum("protos.PeerEndpoint_Type", PeerEndpoint_Type_name, PeerEndpoint_Type_value)
}

func init() { proto.RegisterFile("peer/fabric.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 917 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x9e, 0xfc, 0x93, 0xd4, 0xc7, 0x49, 0xea, 0x30, 0x46, 0xa7, 0x1a, 0x41, 0x67, 0xe8, 0xca,
	0xeb, 0x3a, 0x1b, 0xc8, 0x50, 0x74, 0xd8, 0xc5, 0x30, 0xd7, 0x52, 0x51, 0xa1, 0x89, 0x9d, 0x11,
	0x6e, 0x80, 0xf6, 0xa6, 0x60, 0x24, 0xc6, 0x16, 0x2a, 0x93, 0x02, 0x49, 0x07, 0xf3, 0xed, 0x5e,
	0x67, 0x97, 0x7b, 0x86, 0xed, 0x19, 0xf6, 0x38, 0x83, 0x8e, 0x24, 0xcb, 0x4e, 0xdc, 0x6e, 0xbd,
	0x12, 0xcf, 0xf7, 0x7d, 0xa4, 0xce, 0x39, 0xfc, 0x48, 0xc2, 0x71, 0xc2, 0xb9, 0x1a, 0xdc, 0xb0,
	0x6b, 0x15, 0x05, 0xfd, 0x44, 0x49, 0x23, 0xc9, 0x1e, 0x7e, 0x74, 0xa7, 0x8d, 0x54, 0x30, 0x67,
	0x91, 0x08, 0x64, 0xc8, 0x33, 0xb6, 0xf3, 0x78, 0x1b, 0xe5, 0xb7, 0x5c, 0x98, 0x9c, 0xfa, 0x66,
	0x26, 0xe5, 0x2c, 0xe6, 0x03, 0x8c, 0xae, 0x97, 0x37, 0x03, 0x13, 0x2d, 0xb8, 0x36, 0x6c, 0x91,
	0x64, 0x02, 0xe7, 0x9f, 0x1a, 0x34, 0xa7, 0x8a, 0x09, 0xcd, 0x02, 0x13, 0x49, 0x41, 0x9e, 0x41,
	0xcd, 0xac, 0x12, 0x6e, 0x5b, 0x5d, 0xab, 0x77, 0x74, 0x66, 0x67, 0x2a, 0xdd, 0xdf, 0x90, 0xf4,
	0xa7, 0xab, 0x84, 0x53, 0x54, 0x91, 0x2e, 0x34, 0xd7, 0xbf, 0xf5, 0x5d, 0xbb, 0xd2, 0xb5, 0x7a,
	0x07, 0x74, 0x13, 0x22, 0x36, 0xec, 0x27, 0x6c, 0x15, 0x4b, 0x16, 0xda, 0x55, 0x64, 0x8b, 0x90,
	0x74, 0xe0, 0xc1, 0x82, 0x1b, 0x16, 0x32, 0xc3, 0xec, 0x1a, 0x52, 0xeb, 0x98, 0x10, 0xa8, 0x99,
	0xdf, 0xa2, 0xd0, 0xae, 0x77, 0xad, 0x5e, 0x83, 0xe2, 0x98, 0xfc, 0x08, 0x8d, 0x75, 0xf2, 0xf6,
	0x5e, 0xd7, 0xea, 0x35, 0xcf, 0x3a, 0xfd, 0xac, 0xbc, 0x7e, 0x51, 0x5e, 0x7f, 0x5a, 0x28, 0x68,
	0x29, 0x26, 0x97, 0xd0, 0x0e, 0xa4, 0xb8, 0x89, 0x42, 0x2e, 0x4c, 0xc4, 0xe2, 0xc8, 0xac, 0xce,
	0xf9, 0x2d, 0x8f, 0xed, 0x7d, 0xac, 0xf1, 0xb4, 0xa8, 0x71, 0xb4, 0x43, 0x43, 0x77, 0xce, 0x24,
	0xaf, 0xe0, 0xc9, 0x1d, 0xfc, 0x32, 0x5d, 0x23, 0x90, 0xf1, 0x15, 0x57, 0x3a, 0x92, 0xc2, 0x7e,
	0x80, 0x99, 0xff, 0x87, 0x8a, 0xb4, 0xa1, 0x2e, 0xa4, 0x08, 0xb8, 0xdd, 0xc0, 0x06, 0x64, 0x01,
	0x71, 0xe0, 0xc0, 0xc8, 0x2b, 0x16, 0x47, 0x21, 0x33, 0x52, 0x69, 0x1b, 0x90, 0xdc, 0xc2, 0xd2,
	0x0e, 0x05, 0x5c, 0x19, 0xbb, 0x89, 0x1c, 0x8e, 0xc9, 0x29, 0x34, 0x74, 0x34, 0x13, 0xcc, 0x2c,
	0x15, 0xb7, 0x0f, 0x90, 0x28, 0x01, 0x47, 0x42, 0x2d, 0xdd, 0x39, 0x72, 0x08, 0x8d, 0xb7, 0x63,
	0xd7, 0x7b, 0xe5, 0x8f, 0x3d, 0xb7, 0xf5, 0x15, 0x69, 0x43, 0x6b, 0xf4, 0x7a, 0xe8, 0x8f, 0x47,
	0x13, 0xd7, 0xfb, 0xe0, 0x7a, 0x97, 0xe7, 0x93, 0x77, 0x2d, 0x6b, 0x1b, 0xf5, 0xc7, 0x57, 0x93,
	0x37, 0x5e, 0xab, 0x42, 0x4e, 0xe0, 0x61, 0x89, 0xfe, 0xfa, 0xd6, 0xa3, 0xef, 0x5a, 0x55, 0xf2,
	0x35, 0x9c, 0x94, 0xe0, 0xd4, 0xa3, 0x17, 0xfe, 0x78, 0x38, 0xf5, 0x5a, 0x35, 0xe7, 0x0d, 0xb4,
	0x36, 0x6c, 0xf3, 0x32, 0x96, 0xc1, 0x47, 0xf2, 0x02, 0x0e, 0x4c, 0x89, 0x69, 0xdb, 0xea, 0x56,
	0x7b, 0xcd, 0xb3, 0x93, 0x1d, 0x36, 0xa3, 0x5b, 0x42, 0xe7, 0x4f, 0x0b, 0x8e, 0x37, 0x59, 0xae,
	0x97, 0xb1, 0x59, 0xfb, 0xc4, 0xda, 0xf0, 0xc9, 0x23, 0xd8, 0x53, 0xc8, 0xe6, 0x76, 0xcc, 0xa3,
	0xb4, 0x3b, 0x5c, 0x29, 0xa9, 0x46, 0x32, 0xe4, 0xe8, 0xc5, 0x43, 0x5a, 0x02, 0xe9, 0x4e, 0x60,
	0x80, 0x56, 0x6c, 0xd0, 0x2c, 0x20, 0x3f, 0xc3, 0xd1, 0xda, 0xcc, 0x5e, 0x7a, 0xac, 0xd0, 0x91,
	0xcd, 0xb3, 0x47, 0x6b, 0xcf, 0x6c, 0xb1, 0xf4, 0x8e, 0xda, 0xf9, 0xab, 0x02, 0xf5, 0xac, 0x70,
	0x1b, 0xf6, 0x6f, 0x73, 0x6b, 0x58, 0xf8, 0xef, 0x22, 0xdc, 0xf6, 0x75, 0xe5, 0x4b, 0x7c, 0x7d,
	0xb7, 0x99, 0xd5, 0xff, 0xd9, 0x4c, 0x34, 0x8a, 0x61, 0x86, 0xbf, 0x66, 0x7a, 0x9e, 0x9f, 0xbd,
	0x12, 0x20, 0xcf, 0xe0, 0x38, 0x51, 0xfc, 0x36, 0x92, 0x4b, 0x8d, 0xb9, 0xa3, 0xaa, 0x8e, 0xaa,
	0xfb, 0x44, 0xaa, 0x0e, 0xa4, 0xd0, 0x5c, 0xe8, 0xa5, 0xbe, 0x28, 0xce, 0xf3, 0x5e, 0xa6, 0xbe,
	0x47, 0x90, 0xe7, 0xd0, 0x14, 0x52, 0xa4, 0x13, 0xdd, 0x54, 0xb7, 0x8f, 0xe5, 0xae, 0x33, 0x1e,
	0x97, 0x14, 0xdd, 0xd4, 0x39, 0xbf, 0x5b, 0x70, 0x84, 0xbf, 0xc4, 0xfe, 0xfa, 0xe2, 0x46, 0xa6,
	0xdb, 0x3c, 0xe7, 0xd1, 0x6c, 0x6e, 0xb0, 0x9f, 0x35, 0x9a, 0x47, 0xe4, 0x29, 0xb4, 0x82, 0xa5,
	0x52, 0x5c, 0x98, 0x32, 0xf9, 0xcc, 0x08, 0xf7, 0xf0, 0xdd, 0x95, 0x56, 0x3f, 0x51, 0xa9, 0xf3,
	0x87, 0x05, 0xcd, 0x8d, 0x0c, 0xc9, 0x7b, 0xe8, 0xc4, 0x32, 0x60, 0xf1, 0x39, 0x0f, 0x67, 0x5c,
	0x8d, 0xe4, 0x62, 0x11, 0x99, 0xf5, 0x3e, 0x61, 0x56, 0x9f, 0xdf, 0xc9, 0xcf, 0xcc, 0x26, 0xbf,
	0xc0, 0xc3, 0x6d, 0x2b, 0x69, 0xbb, 0x82, 0xbb, 0xfb, 0x29, 0xe7, 0xdd, 0x95, 0x3b, 0xcf, 0xa1,
	0x79, 0xc9, 0xb9, 0x1a, 0x86, 0xa1, 0xe2, 0x1a, 0xef, 0x8b, 0xb9, 0xd4, 0xa6, 0x38, 0x29, 0xe9,
	0x38, 0xc5, 0x12, 0xa9, 0xb2, 0x73, 0x52, 0xa7, 0x38, 0x76, 0x4e, 0x61, 0x2f, 0x9d, 0xe6, 0xbb,
	0x29, 0x2b, 0xd8, 0x82, 0x17, 0x33, 0xd2, 0xb1, 0xf3, 0xb7, 0x05, 0x07, 0x29, 0xed, 0x89, 0x30,
	0x91, 0x91, 0x30, 0xe4, 0x09, 0x54, 0x7c, 0x37, 0xaf, 0xf5, 0xa8, 0x48, 0x2d, 0x5b, 0x80, 0x56,
	0xb2, 0xeb, 0x9f, 0x65, 0x19, 0xe0, 0x5f, 0x1a, 0xb4, 0x08, 0xc9, 0xf7, 0xf9, 0x43, 0x53, 0xc5,
	0x4b, 0xf8, 0xf1, 0xe6, 0xdc, 0x62, 0xf5, 0xcd, 0x97, 0xa6, 0x0d, 0xf5, 0xe4, 0x63, 0xe4, 0xbb,
	0xb9, 0x5d, 0xb3, 0xc0, 0x79, 0xb1, 0xfb, 0x4e, 0x3b, 0x84, 0xc6, 0xd5, 0xf0, 0xdc, 0x77, 0x87,
	0xd3, 0x09, 0x6d, 0x59, 0xe4, 0x18, 0x0e, 0xc7, 0x93, 0xf1, 0x87, 0x12, 0xaa, 0x38, 0x3f, 0x65,
	0x75, 0xe8, 0x0b, 0xae, 0x35, 0x9b, 0x71, 0xf2, 0x14, 0xea, 0xe9, 0x23, 0x5a, 0x5c, 0x48, 0xed,
	0x5d, 0xe9, 0xd0, 0x4c, 0xe2, 0xf4, 0xe1, 0x08, 0xe7, 0xe6, 0xad, 0xe5, 0x78, 0x9e, 0x58, 0x11,
	0xe0, 0x0a, 0x0d, 0x5a, 0x02, 0x2f, 0xbf, 0x7b, 0xff, 0xed, 0x2c, 0x32, 0xf3, 0xe5, 0x75, 0x3f,
	0x90, 0x8b, 0xc1, 0x7c, 0x95, 0x70, 0x15, 0xe3, 0xa6, 0xe7, 0x6f, 0x7c, 0xf6, 0x38, 0xeb, 0x41,
	0xba, 0xfa, 0x75, 0xf6, 0xd2, 0xff, 0xf0, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0xd6, 0xd8,
	0xfd, 0x05, 0x08, 0x00, 0x00,
}
