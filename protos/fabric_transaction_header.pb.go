// Code generated by protoc-gen-go.
// source: fabric_transaction_header.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Header_Type int32

const (
	Header_UNDEFINED Header_Type = 0
	Header_CHAINCODE Header_Type = 1
)

var Header_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "CHAINCODE",
}
var Header_Type_value = map[string]int32{
	"UNDEFINED": 0,
	"CHAINCODE": 1,
}

func (x Header_Type) String() string {
	return proto.EnumName(Header_Type_name, int32(x))
}
func (Header_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0, 0} }

// A Header contains fields that are common to all proposals and all
// transactions, no matter their type.  It can include also type-dependant
// fields by using the 'extensions' field.  This header is on purpose the same
// header for proposals (a request to do "something" on the ledger) and a
// transaction (the endorsed actions following from some request).
// Furthermore, a proposal, its endorsements and the resulting transaction are
// linked together by this message, as follows
// 1. a Proposal contains a Header
// 2. the hash of the Header of a proposal is included in the proposal response
//    generated by each endorser as a result of that proposal
// 3. a TransactionAction contains both i) the *same* Header (byte-by-byte) of
//    the corresponsing Proposal and ii) the hash of the Header in each of the
//    endorsed actions
type Header struct {
	// Version indicates message protocol version
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// Timestamp is the local time when the message was created
	// by the sender
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// Type of the transaction
	Type Header_Type `protobuf:"varint,3,opt,name=type,enum=protos.Header_Type" json:"type,omitempty"`
	// Creator of the header (and encapsulating message). This is usually a tcert
	// or ecert identifying the entity who submits the proposal/transaction.  The
	// creator identifies the signer of
	// 1. a proposal (if this is the header of a Proposal message)
	// 2. a transaction (if this is the header of a TransactionAction message)
	Creator []byte `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	// Arbitrary number that may only be used once. This ensures the hash of
	// the proposal is unique and may be used in replay detection
	Nonce []byte `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Identifier of the chain this header targets to
	ChainID []byte `protobuf:"bytes,6,opt,name=chainID,proto3" json:"chainID,omitempty"`
	// Extensions is used to include type-dependant fields
	Extensions []byte `protobuf:"bytes,7,opt,name=extensions,proto3" json:"extensions,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

func (m *Header) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "protos.Header")
	proto.RegisterEnum("protos.Header_Type", Header_Type_name, Header_Type_value)
}

func init() { proto.RegisterFile("fabric_transaction_header.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0x3f, 0xf7, 0xeb, 0x8f, 0x6a, 0x7e, 0x54, 0x19, 0x06, 0xab, 0x03, 0x8d, 0xaa, 0x0a,
	0x32, 0x39, 0x52, 0x59, 0x58, 0xa1, 0x29, 0x6a, 0x97, 0x22, 0x45, 0x65, 0x61, 0xa9, 0x9c, 0xf4,
	0x34, 0xb1, 0xd4, 0xd8, 0x91, 0xed, 0x22, 0x72, 0x21, 0xdc, 0x2f, 0x8a, 0x4d, 0x80, 0x29, 0x7a,
	0x4e, 0x9e, 0x73, 0x5e, 0xeb, 0xc5, 0x93, 0x03, 0x4f, 0xb5, 0xc8, 0x76, 0x56, 0x73, 0x69, 0x78,
	0x66, 0x85, 0x92, 0xbb, 0x02, 0xf8, 0x1e, 0x34, 0xab, 0xb4, 0xb2, 0x8a, 0xf4, 0xdd, 0xc7, 0x8c,
	0x27, 0xb9, 0x52, 0xf9, 0x11, 0x22, 0x87, 0xe9, 0xe9, 0x10, 0x59, 0x51, 0x82, 0xb1, 0xbc, 0xac,
	0xbc, 0x38, 0xfd, 0xec, 0xe0, 0xfe, 0xca, 0x6d, 0x12, 0x8a, 0x07, 0xef, 0xa0, 0x8d, 0x50, 0x92,
	0xa2, 0x00, 0x85, 0xbd, 0xa4, 0x45, 0xf2, 0x80, 0x87, 0x3f, 0x7b, 0xb4, 0x13, 0xa0, 0xf0, 0x6c,
	0x3e, 0x66, 0xfe, 0x32, 0x6b, 0x2f, 0xb3, 0x6d, 0x6b, 0x24, 0xbf, 0x32, 0xb9, 0xc3, 0x5d, 0x5b,
	0x57, 0x40, 0xff, 0x07, 0x28, 0xbc, 0x9c, 0x5f, 0x79, 0xdb, 0x30, 0x9f, 0xc8, 0xb6, 0x75, 0x05,
	0x89, 0x13, 0x9a, 0xf0, 0x4c, 0x03, 0xb7, 0x4a, 0xd3, 0x6e, 0x80, 0xc2, 0xf3, 0xa4, 0x45, 0x72,
	0x8d, 0x7b, 0x52, 0xc9, 0x0c, 0x68, 0xcf, 0xcd, 0x3d, 0x38, 0xbf, 0xe0, 0x42, 0xae, 0x63, 0xda,
	0xff, 0xf6, 0x3d, 0x92, 0x1b, 0x8c, 0xe1, 0xc3, 0x82, 0x6c, 0x5e, 0x6e, 0xe8, 0xc0, 0xfd, 0xfc,
	0x33, 0x99, 0xce, 0x70, 0xb7, 0xc9, 0x25, 0x17, 0x78, 0xf8, 0xba, 0x89, 0x97, 0xcf, 0xeb, 0xcd,
	0x32, 0x1e, 0xfd, 0x6b, 0x70, 0xb1, 0x7a, 0x5c, 0x6f, 0x16, 0x2f, 0xf1, 0x72, 0x84, 0x9e, 0x6e,
	0xdf, 0x66, 0xb9, 0xb0, 0xc5, 0x29, 0x65, 0x99, 0x2a, 0xa3, 0xa2, 0xae, 0x40, 0x1f, 0x61, 0x9f,
	0x83, 0x8e, 0x7c, 0xf5, 0xbe, 0x51, 0x93, 0xfa, 0xa2, 0xef, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x4e, 0x27, 0xaf, 0x4c, 0x92, 0x01, 0x00, 0x00,
}
