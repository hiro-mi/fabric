// Code generated by protoc-gen-go.
// source: orderer/ab.proto
// DO NOT EDIT!

/*
Package orderer is a generated protocol buffer package.

It is generated from these files:
	orderer/ab.proto

It has these top-level messages:
	BroadcastResponse
	SeekInfo
	Acknowledgement
	DeliverUpdate
	DeliverResponse
*/
package orderer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/hyperledger/fabric/protos/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Start may be specified to a specific block number, or may be request from the newest or oldest available
// The start location is always inclusive, so the first reply from NEWEST will contain the newest block at the time
// of reception, it will must not wait until a new block is created.  Similarly, when SPECIFIED, and SpecifiedNumber = 10
// The first block received must be block 10, not block 11
type SeekInfo_StartType int32

const (
	SeekInfo_NEWEST    SeekInfo_StartType = 0
	SeekInfo_OLDEST    SeekInfo_StartType = 1
	SeekInfo_SPECIFIED SeekInfo_StartType = 2
)

var SeekInfo_StartType_name = map[int32]string{
	0: "NEWEST",
	1: "OLDEST",
	2: "SPECIFIED",
}
var SeekInfo_StartType_value = map[string]int32{
	"NEWEST":    0,
	"OLDEST":    1,
	"SPECIFIED": 2,
}

func (x SeekInfo_StartType) String() string {
	return proto.EnumName(SeekInfo_StartType_name, int32(x))
}
func (SeekInfo_StartType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type BroadcastResponse struct {
	Status common.Status `protobuf:"varint,1,opt,name=Status,enum=common.Status" json:"Status,omitempty"`
}

func (m *BroadcastResponse) Reset()                    { *m = BroadcastResponse{} }
func (m *BroadcastResponse) String() string            { return proto.CompactTextString(m) }
func (*BroadcastResponse) ProtoMessage()               {}
func (*BroadcastResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SeekInfo struct {
	Start           SeekInfo_StartType `protobuf:"varint,1,opt,name=Start,enum=orderer.SeekInfo_StartType" json:"Start,omitempty"`
	SpecifiedNumber uint64             `protobuf:"varint,2,opt,name=SpecifiedNumber" json:"SpecifiedNumber,omitempty"`
	WindowSize      uint64             `protobuf:"varint,3,opt,name=WindowSize" json:"WindowSize,omitempty"`
	ChainID         []byte             `protobuf:"bytes,4,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
}

func (m *SeekInfo) Reset()                    { *m = SeekInfo{} }
func (m *SeekInfo) String() string            { return proto.CompactTextString(m) }
func (*SeekInfo) ProtoMessage()               {}
func (*SeekInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Acknowledgement struct {
	Number uint64 `protobuf:"varint,1,opt,name=Number" json:"Number,omitempty"`
}

func (m *Acknowledgement) Reset()                    { *m = Acknowledgement{} }
func (m *Acknowledgement) String() string            { return proto.CompactTextString(m) }
func (*Acknowledgement) ProtoMessage()               {}
func (*Acknowledgement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// The update message either causes a seek to a new stream start with a new window, or acknowledges a received block and advances the base of the window
type DeliverUpdate struct {
	// Types that are valid to be assigned to Type:
	//	*DeliverUpdate_Acknowledgement
	//	*DeliverUpdate_Seek
	Type isDeliverUpdate_Type `protobuf_oneof:"Type"`
}

func (m *DeliverUpdate) Reset()                    { *m = DeliverUpdate{} }
func (m *DeliverUpdate) String() string            { return proto.CompactTextString(m) }
func (*DeliverUpdate) ProtoMessage()               {}
func (*DeliverUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isDeliverUpdate_Type interface {
	isDeliverUpdate_Type()
}

type DeliverUpdate_Acknowledgement struct {
	Acknowledgement *Acknowledgement `protobuf:"bytes,1,opt,name=Acknowledgement,oneof"`
}
type DeliverUpdate_Seek struct {
	Seek *SeekInfo `protobuf:"bytes,2,opt,name=Seek,oneof"`
}

func (*DeliverUpdate_Acknowledgement) isDeliverUpdate_Type() {}
func (*DeliverUpdate_Seek) isDeliverUpdate_Type()            {}

func (m *DeliverUpdate) GetType() isDeliverUpdate_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DeliverUpdate) GetAcknowledgement() *Acknowledgement {
	if x, ok := m.GetType().(*DeliverUpdate_Acknowledgement); ok {
		return x.Acknowledgement
	}
	return nil
}

func (m *DeliverUpdate) GetSeek() *SeekInfo {
	if x, ok := m.GetType().(*DeliverUpdate_Seek); ok {
		return x.Seek
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeliverUpdate) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeliverUpdate_OneofMarshaler, _DeliverUpdate_OneofUnmarshaler, _DeliverUpdate_OneofSizer, []interface{}{
		(*DeliverUpdate_Acknowledgement)(nil),
		(*DeliverUpdate_Seek)(nil),
	}
}

func _DeliverUpdate_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeliverUpdate)
	// Type
	switch x := m.Type.(type) {
	case *DeliverUpdate_Acknowledgement:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Acknowledgement); err != nil {
			return err
		}
	case *DeliverUpdate_Seek:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Seek); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DeliverUpdate.Type has unexpected type %T", x)
	}
	return nil
}

func _DeliverUpdate_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeliverUpdate)
	switch tag {
	case 1: // Type.Acknowledgement
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Acknowledgement)
		err := b.DecodeMessage(msg)
		m.Type = &DeliverUpdate_Acknowledgement{msg}
		return true, err
	case 2: // Type.Seek
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SeekInfo)
		err := b.DecodeMessage(msg)
		m.Type = &DeliverUpdate_Seek{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DeliverUpdate_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeliverUpdate)
	// Type
	switch x := m.Type.(type) {
	case *DeliverUpdate_Acknowledgement:
		s := proto.Size(x.Acknowledgement)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DeliverUpdate_Seek:
		s := proto.Size(x.Seek)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type DeliverResponse struct {
	// Types that are valid to be assigned to Type:
	//	*DeliverResponse_Error
	//	*DeliverResponse_Block
	Type isDeliverResponse_Type `protobuf_oneof:"Type"`
}

func (m *DeliverResponse) Reset()                    { *m = DeliverResponse{} }
func (m *DeliverResponse) String() string            { return proto.CompactTextString(m) }
func (*DeliverResponse) ProtoMessage()               {}
func (*DeliverResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isDeliverResponse_Type interface {
	isDeliverResponse_Type()
}

type DeliverResponse_Error struct {
	Error common.Status `protobuf:"varint,1,opt,name=Error,enum=common.Status,oneof"`
}
type DeliverResponse_Block struct {
	Block *common.Block `protobuf:"bytes,2,opt,name=Block,oneof"`
}

func (*DeliverResponse_Error) isDeliverResponse_Type() {}
func (*DeliverResponse_Block) isDeliverResponse_Type() {}

func (m *DeliverResponse) GetType() isDeliverResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DeliverResponse) GetError() common.Status {
	if x, ok := m.GetType().(*DeliverResponse_Error); ok {
		return x.Error
	}
	return common.Status_UNKNOWN
}

func (m *DeliverResponse) GetBlock() *common.Block {
	if x, ok := m.GetType().(*DeliverResponse_Block); ok {
		return x.Block
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DeliverResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DeliverResponse_OneofMarshaler, _DeliverResponse_OneofUnmarshaler, _DeliverResponse_OneofSizer, []interface{}{
		(*DeliverResponse_Error)(nil),
		(*DeliverResponse_Block)(nil),
	}
}

func _DeliverResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DeliverResponse)
	// Type
	switch x := m.Type.(type) {
	case *DeliverResponse_Error:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Error))
	case *DeliverResponse_Block:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DeliverResponse.Type has unexpected type %T", x)
	}
	return nil
}

func _DeliverResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DeliverResponse)
	switch tag {
	case 1: // Type.Error
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Type = &DeliverResponse_Error{common.Status(x)}
		return true, err
	case 2: // Type.Block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.Block)
		err := b.DecodeMessage(msg)
		m.Type = &DeliverResponse_Block{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DeliverResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DeliverResponse)
	// Type
	switch x := m.Type.(type) {
	case *DeliverResponse_Error:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Error))
	case *DeliverResponse_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*BroadcastResponse)(nil), "orderer.BroadcastResponse")
	proto.RegisterType((*SeekInfo)(nil), "orderer.SeekInfo")
	proto.RegisterType((*Acknowledgement)(nil), "orderer.Acknowledgement")
	proto.RegisterType((*DeliverUpdate)(nil), "orderer.DeliverUpdate")
	proto.RegisterType((*DeliverResponse)(nil), "orderer.DeliverResponse")
	proto.RegisterEnum("orderer.SeekInfo_StartType", SeekInfo_StartType_name, SeekInfo_StartType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for AtomicBroadcast service

type AtomicBroadcastClient interface {
	// broadcast receives a reply of Acknowledgement for each common.Envelope in order, indicating success or type of failure
	Broadcast(ctx context.Context, opts ...grpc.CallOption) (AtomicBroadcast_BroadcastClient, error)
	// deliver first requires an update containing a seek message, then a stream of block replies is received.
	// The receiver may choose to send an Acknowledgement for any block number it receives, however Acknowledgements must never be more than WindowSize apart
	// To avoid latency, clients will likely acknowledge before the WindowSize has been exhausted, preventing the server from stopping and waiting for an Acknowledgement
	Deliver(ctx context.Context, opts ...grpc.CallOption) (AtomicBroadcast_DeliverClient, error)
}

type atomicBroadcastClient struct {
	cc *grpc.ClientConn
}

func NewAtomicBroadcastClient(cc *grpc.ClientConn) AtomicBroadcastClient {
	return &atomicBroadcastClient{cc}
}

func (c *atomicBroadcastClient) Broadcast(ctx context.Context, opts ...grpc.CallOption) (AtomicBroadcast_BroadcastClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AtomicBroadcast_serviceDesc.Streams[0], c.cc, "/orderer.AtomicBroadcast/Broadcast", opts...)
	if err != nil {
		return nil, err
	}
	x := &atomicBroadcastBroadcastClient{stream}
	return x, nil
}

type AtomicBroadcast_BroadcastClient interface {
	Send(*common.Envelope) error
	Recv() (*BroadcastResponse, error)
	grpc.ClientStream
}

type atomicBroadcastBroadcastClient struct {
	grpc.ClientStream
}

func (x *atomicBroadcastBroadcastClient) Send(m *common.Envelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *atomicBroadcastBroadcastClient) Recv() (*BroadcastResponse, error) {
	m := new(BroadcastResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *atomicBroadcastClient) Deliver(ctx context.Context, opts ...grpc.CallOption) (AtomicBroadcast_DeliverClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_AtomicBroadcast_serviceDesc.Streams[1], c.cc, "/orderer.AtomicBroadcast/Deliver", opts...)
	if err != nil {
		return nil, err
	}
	x := &atomicBroadcastDeliverClient{stream}
	return x, nil
}

type AtomicBroadcast_DeliverClient interface {
	Send(*DeliverUpdate) error
	Recv() (*DeliverResponse, error)
	grpc.ClientStream
}

type atomicBroadcastDeliverClient struct {
	grpc.ClientStream
}

func (x *atomicBroadcastDeliverClient) Send(m *DeliverUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *atomicBroadcastDeliverClient) Recv() (*DeliverResponse, error) {
	m := new(DeliverResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for AtomicBroadcast service

type AtomicBroadcastServer interface {
	// broadcast receives a reply of Acknowledgement for each common.Envelope in order, indicating success or type of failure
	Broadcast(AtomicBroadcast_BroadcastServer) error
	// deliver first requires an update containing a seek message, then a stream of block replies is received.
	// The receiver may choose to send an Acknowledgement for any block number it receives, however Acknowledgements must never be more than WindowSize apart
	// To avoid latency, clients will likely acknowledge before the WindowSize has been exhausted, preventing the server from stopping and waiting for an Acknowledgement
	Deliver(AtomicBroadcast_DeliverServer) error
}

func RegisterAtomicBroadcastServer(s *grpc.Server, srv AtomicBroadcastServer) {
	s.RegisterService(&_AtomicBroadcast_serviceDesc, srv)
}

func _AtomicBroadcast_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtomicBroadcastServer).Broadcast(&atomicBroadcastBroadcastServer{stream})
}

type AtomicBroadcast_BroadcastServer interface {
	Send(*BroadcastResponse) error
	Recv() (*common.Envelope, error)
	grpc.ServerStream
}

type atomicBroadcastBroadcastServer struct {
	grpc.ServerStream
}

func (x *atomicBroadcastBroadcastServer) Send(m *BroadcastResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *atomicBroadcastBroadcastServer) Recv() (*common.Envelope, error) {
	m := new(common.Envelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AtomicBroadcast_Deliver_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtomicBroadcastServer).Deliver(&atomicBroadcastDeliverServer{stream})
}

type AtomicBroadcast_DeliverServer interface {
	Send(*DeliverResponse) error
	Recv() (*DeliverUpdate, error)
	grpc.ServerStream
}

type atomicBroadcastDeliverServer struct {
	grpc.ServerStream
}

func (x *atomicBroadcastDeliverServer) Send(m *DeliverResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *atomicBroadcastDeliverServer) Recv() (*DeliverUpdate, error) {
	m := new(DeliverUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _AtomicBroadcast_serviceDesc = grpc.ServiceDesc{
	ServiceName: "orderer.AtomicBroadcast",
	HandlerType: (*AtomicBroadcastServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Broadcast",
			Handler:       _AtomicBroadcast_Broadcast_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Deliver",
			Handler:       _AtomicBroadcast_Deliver_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("orderer/ab.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0xed, 0x6e, 0xd3, 0x30,
	0x14, 0x9d, 0x47, 0x3f, 0xd8, 0x1d, 0x5d, 0x3b, 0x23, 0x4d, 0x51, 0x91, 0x10, 0x8a, 0x04, 0x14,
	0x09, 0x25, 0x10, 0x7e, 0xf2, 0x03, 0xad, 0x4b, 0x10, 0x95, 0xd0, 0x40, 0xc9, 0xd0, 0x24, 0xfe,
	0xe5, 0xe3, 0x76, 0xb5, 0xd6, 0xc4, 0x91, 0xe3, 0x6e, 0x82, 0x07, 0xe0, 0x0d, 0x78, 0x34, 0xde,
	0x07, 0xc7, 0x71, 0xc2, 0xd6, 0xf2, 0x2b, 0xbe, 0xe7, 0x9e, 0x73, 0xcf, 0xcd, 0xb1, 0x61, 0xc2,
	0x45, 0x86, 0x02, 0x85, 0x1b, 0x27, 0x4e, 0x29, 0xb8, 0xe4, 0x74, 0x68, 0x90, 0xe9, 0xe3, 0x94,
	0xe7, 0x39, 0x2f, 0xdc, 0xe6, 0xd3, 0x74, 0xed, 0xf7, 0x70, 0x3c, 0x17, 0x3c, 0xce, 0xd2, 0xb8,
	0x92, 0x21, 0x56, 0x25, 0x2f, 0x2a, 0xa4, 0x2f, 0x60, 0x10, 0xc9, 0x58, 0x6e, 0x2a, 0x8b, 0x3c,
	0x23, 0xb3, 0x23, 0xef, 0xc8, 0x31, 0x9a, 0x06, 0x0d, 0x4d, 0xd7, 0xfe, 0x43, 0xe0, 0x61, 0x84,
	0x78, 0xbd, 0x28, 0x96, 0x9c, 0xbe, 0x85, 0xbe, 0x82, 0x85, 0x34, 0x9a, 0x27, 0x8e, 0xf1, 0x75,
	0x5a, 0x86, 0xa3, 0xdb, 0x17, 0x3f, 0x4a, 0x0c, 0x1b, 0x26, 0x9d, 0xc1, 0x38, 0x2a, 0x31, 0x65,
	0x4b, 0x86, 0xd9, 0xf9, 0x26, 0x4f, 0x50, 0x58, 0xfb, 0x4a, 0xdc, 0x0b, 0xb7, 0x61, 0xfa, 0x14,
	0xe0, 0x92, 0x15, 0x19, 0xbf, 0x8d, 0xd8, 0x4f, 0xb4, 0x1e, 0x68, 0xd2, 0x1d, 0x84, 0x5a, 0x30,
	0x3c, 0x5b, 0xc5, 0xac, 0x58, 0xf8, 0x56, 0x4f, 0x35, 0x1f, 0x85, 0x6d, 0x69, 0x7b, 0x70, 0xd0,
	0xf9, 0x52, 0x80, 0xc1, 0x79, 0x70, 0x19, 0x44, 0x17, 0x93, 0xbd, 0xfa, 0xfc, 0xe5, 0xb3, 0x5f,
	0x9f, 0x09, 0x1d, 0x29, 0xd2, 0xd7, 0xe0, 0x6c, 0xf1, 0x71, 0x11, 0xf8, 0x93, 0x7d, 0xfb, 0x15,
	0x8c, 0x4f, 0xd3, 0xeb, 0x82, 0xdf, 0xae, 0x31, 0xbb, 0xc2, 0x1c, 0x0b, 0x49, 0x4f, 0x94, 0xb2,
	0xd9, 0x90, 0x68, 0x73, 0x53, 0xd9, 0xbf, 0x08, 0x8c, 0x7c, 0x5c, 0xb3, 0x1b, 0x14, 0xdf, 0xca,
	0x2c, 0x96, 0x48, 0xfd, 0x1d, 0xb1, 0x96, 0x1c, 0x7a, 0x56, 0x97, 0xc8, 0x56, 0xff, 0xd3, 0x5e,
	0xb8, 0xe3, 0xf7, 0x12, 0x7a, 0x75, 0x6e, 0x3a, 0x8f, 0x43, 0xef, 0x78, 0x27, 0x4c, 0xa5, 0xd1,
	0x84, 0xf9, 0x00, 0x7a, 0xf5, 0xaf, 0xd9, 0x2b, 0x18, 0x9b, 0x3d, 0xee, 0x5c, 0x63, 0x3f, 0x10,
	0x82, 0x8b, 0xff, 0xdf, 0xa2, 0x9a, 0xd0, 0xb4, 0xe9, 0x73, 0xe8, 0xcf, 0xd7, 0x3c, 0x6d, 0xcd,
	0x46, 0x2d, 0x4f, 0x83, 0x35, 0x4d, 0x1f, 0x5a, 0x27, 0xef, 0x37, 0x51, 0x7f, 0x28, 0x79, 0xce,
	0xd2, 0xee, 0xe5, 0xd0, 0x0f, 0x70, 0xf0, 0xaf, 0x98, 0xb4, 0x03, 0x82, 0xe2, 0x06, 0xd7, 0xbc,
	0xc4, 0xe9, 0xb4, 0xdb, 0x7f, 0xe7, 0xb1, 0xd9, 0x7b, 0x33, 0xf2, 0x86, 0xd0, 0x53, 0x18, 0x9a,
	0xf5, 0xe9, 0x49, 0x47, 0xbe, 0x17, 0xec, 0xd4, 0xda, 0xc6, 0xef, 0x8f, 0x98, 0x3b, 0xdf, 0x5f,
	0x5f, 0x31, 0xb9, 0xda, 0x24, 0xb5, 0xbd, 0xbb, 0x52, 0xab, 0x0a, 0x9d, 0xa7, 0x70, 0x97, 0x71,
	0x22, 0x58, 0xea, 0xea, 0x17, 0x5f, 0xb9, 0x66, 0x4a, 0x32, 0xd0, 0xf5, 0xbb, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x22, 0xc6, 0xf5, 0x3a, 0x33, 0x03, 0x00, 0x00,
}
