// Code generated by protoc-gen-go.
// source: server_admin.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ServerStatus_StatusCode int32

const (
	ServerStatus_UNDEFINED ServerStatus_StatusCode = 0
	ServerStatus_STARTED   ServerStatus_StatusCode = 1
	ServerStatus_STOPPED   ServerStatus_StatusCode = 2
	ServerStatus_PAUSED    ServerStatus_StatusCode = 3
	ServerStatus_ERROR     ServerStatus_StatusCode = 4
	ServerStatus_UNKNOWN   ServerStatus_StatusCode = 5
)

var ServerStatus_StatusCode_name = map[int32]string{
	0: "UNDEFINED",
	1: "STARTED",
	2: "STOPPED",
	3: "PAUSED",
	4: "ERROR",
	5: "UNKNOWN",
}
var ServerStatus_StatusCode_value = map[string]int32{
	"UNDEFINED": 0,
	"STARTED":   1,
	"STOPPED":   2,
	"PAUSED":    3,
	"ERROR":     4,
	"UNKNOWN":   5,
}

func (x ServerStatus_StatusCode) String() string {
	return proto.EnumName(ServerStatus_StatusCode_name, int32(x))
}
func (ServerStatus_StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor15, []int{0, 0} }

type ServerStatus struct {
	Status ServerStatus_StatusCode `protobuf:"varint,1,opt,name=status,enum=protos.ServerStatus_StatusCode" json:"status,omitempty"`
}

func (m *ServerStatus) Reset()                    { *m = ServerStatus{} }
func (m *ServerStatus) String() string            { return proto.CompactTextString(m) }
func (*ServerStatus) ProtoMessage()               {}
func (*ServerStatus) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

type LogLevelRequest struct {
	LogModule string `protobuf:"bytes,1,opt,name=logModule" json:"logModule,omitempty"`
	LogLevel  string `protobuf:"bytes,2,opt,name=logLevel" json:"logLevel,omitempty"`
}

func (m *LogLevelRequest) Reset()                    { *m = LogLevelRequest{} }
func (m *LogLevelRequest) String() string            { return proto.CompactTextString(m) }
func (*LogLevelRequest) ProtoMessage()               {}
func (*LogLevelRequest) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

type LogLevelResponse struct {
	LogModule string `protobuf:"bytes,1,opt,name=logModule" json:"logModule,omitempty"`
	LogLevel  string `protobuf:"bytes,2,opt,name=logLevel" json:"logLevel,omitempty"`
}

func (m *LogLevelResponse) Reset()                    { *m = LogLevelResponse{} }
func (m *LogLevelResponse) String() string            { return proto.CompactTextString(m) }
func (*LogLevelResponse) ProtoMessage()               {}
func (*LogLevelResponse) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func init() {
	proto.RegisterType((*ServerStatus)(nil), "protos.ServerStatus")
	proto.RegisterType((*LogLevelRequest)(nil), "protos.LogLevelRequest")
	proto.RegisterType((*LogLevelResponse)(nil), "protos.LogLevelResponse")
	proto.RegisterEnum("protos.ServerStatus_StatusCode", ServerStatus_StatusCode_name, ServerStatus_StatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Admin service

type AdminClient interface {
	// Return the serve status.
	GetStatus(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*ServerStatus, error)
	StartServer(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*ServerStatus, error)
	StopServer(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*ServerStatus, error)
	GetModuleLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*LogLevelResponse, error)
	SetModuleLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*LogLevelResponse, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) GetStatus(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*ServerStatus, error) {
	out := new(ServerStatus)
	err := grpc.Invoke(ctx, "/protos.Admin/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StartServer(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*ServerStatus, error) {
	out := new(ServerStatus)
	err := grpc.Invoke(ctx, "/protos.Admin/StartServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StopServer(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*ServerStatus, error) {
	out := new(ServerStatus)
	err := grpc.Invoke(ctx, "/protos.Admin/StopServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetModuleLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*LogLevelResponse, error) {
	out := new(LogLevelResponse)
	err := grpc.Invoke(ctx, "/protos.Admin/GetModuleLogLevel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetModuleLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*LogLevelResponse, error) {
	out := new(LogLevelResponse)
	err := grpc.Invoke(ctx, "/protos.Admin/SetModuleLogLevel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminServer interface {
	// Return the serve status.
	GetStatus(context.Context, *google_protobuf1.Empty) (*ServerStatus, error)
	StartServer(context.Context, *google_protobuf1.Empty) (*ServerStatus, error)
	StopServer(context.Context, *google_protobuf1.Empty) (*ServerStatus, error)
	GetModuleLogLevel(context.Context, *LogLevelRequest) (*LogLevelResponse, error)
	SetModuleLogLevel(context.Context, *LogLevelRequest) (*LogLevelResponse, error)
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Admin/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetStatus(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Admin/StartServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StartServer(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StopServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StopServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Admin/StopServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StopServer(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetModuleLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetModuleLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Admin/GetModuleLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetModuleLogLevel(ctx, req.(*LogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetModuleLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetModuleLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Admin/SetModuleLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetModuleLogLevel(ctx, req.(*LogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _Admin_GetStatus_Handler,
		},
		{
			MethodName: "StartServer",
			Handler:    _Admin_StartServer_Handler,
		},
		{
			MethodName: "StopServer",
			Handler:    _Admin_StopServer_Handler,
		},
		{
			MethodName: "GetModuleLogLevel",
			Handler:    _Admin_GetModuleLogLevel_Handler,
		},
		{
			MethodName: "SetModuleLogLevel",
			Handler:    _Admin_SetModuleLogLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor15,
}

func init() { proto.RegisterFile("server_admin.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 375 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x4e, 0xea, 0x50,
	0x10, 0x86, 0x29, 0xf7, 0xc2, 0xbd, 0x1d, 0xee, 0xd5, 0x7a, 0x62, 0x94, 0x54, 0x13, 0x4d, 0x63,
	0x8c, 0xab, 0x36, 0xc1, 0x85, 0x0b, 0x75, 0x81, 0xb6, 0xa2, 0x01, 0x0b, 0x69, 0x21, 0x46, 0x37,
	0xa6, 0xa5, 0x43, 0x21, 0x29, 0x9c, 0xda, 0x73, 0x4a, 0xc2, 0xeb, 0xf8, 0x4e, 0xbe, 0x8f, 0x69,
	0x0f, 0x88, 0x51, 0x37, 0x12, 0x57, 0xd3, 0x99, 0xf9, 0xff, 0x3f, 0x3d, 0x5f, 0x06, 0x08, 0xc3,
	0x64, 0x8a, 0xc9, 0xa3, 0x17, 0x8c, 0x47, 0x13, 0x3d, 0x4e, 0x28, 0xa7, 0xa4, 0x9c, 0x17, 0xa6,
	0xee, 0x84, 0x94, 0x86, 0x11, 0x1a, 0x79, 0xeb, 0xa7, 0x03, 0x03, 0xc7, 0x31, 0x9f, 0x09, 0x91,
	0xf6, 0x2c, 0xc1, 0x3f, 0x37, 0xf7, 0xba, 0xdc, 0xe3, 0x29, 0x23, 0x27, 0x50, 0x66, 0xf9, 0x57,
	0x55, 0xda, 0x97, 0x8e, 0xd6, 0x6a, 0x7b, 0x42, 0xc8, 0xf4, 0xf7, 0x2a, 0x5d, 0x94, 0x4b, 0x1a,
	0xa0, 0x33, 0x97, 0x6b, 0xf7, 0x00, 0xcb, 0x29, 0xf9, 0x0f, 0x72, 0xcf, 0x36, 0xad, 0xab, 0x1b,
	0xdb, 0x32, 0x95, 0x02, 0xa9, 0xc0, 0x1f, 0xb7, 0x5b, 0x77, 0xba, 0x96, 0xa9, 0x48, 0xa2, 0x69,
	0x77, 0x3a, 0x96, 0xa9, 0x14, 0x09, 0x40, 0xb9, 0x53, 0xef, 0xb9, 0x96, 0xa9, 0xfc, 0x22, 0x32,
	0x94, 0x2c, 0xc7, 0x69, 0x3b, 0xca, 0xef, 0x4c, 0xd3, 0xb3, 0x9b, 0x76, 0xfb, 0xce, 0x56, 0x4a,
	0x5a, 0x13, 0xd6, 0x5b, 0x34, 0x6c, 0xe1, 0x14, 0x23, 0x07, 0x9f, 0x52, 0x64, 0x9c, 0xec, 0x82,
	0x1c, 0xd1, 0xf0, 0x96, 0x06, 0x69, 0x84, 0xf9, 0x9f, 0xca, 0xce, 0x72, 0x40, 0x54, 0xf8, 0x1b,
	0xcd, 0x0d, 0xd5, 0x62, 0xbe, 0x7c, 0xeb, 0xb5, 0x16, 0x28, 0xcb, 0x30, 0x16, 0xd3, 0x09, 0xc3,
	0xd5, 0xd3, 0x6a, 0x2f, 0x45, 0x28, 0xd5, 0x33, 0xe8, 0xe4, 0x14, 0xe4, 0x06, 0xf2, 0x39, 0xc5,
	0x2d, 0x5d, 0x40, 0xd7, 0x17, 0xd0, 0x75, 0x2b, 0x83, 0xae, 0x6e, 0x7e, 0x45, 0x53, 0x2b, 0x90,
	0x73, 0xa8, 0xb8, 0xdc, 0x4b, 0xb8, 0x18, 0x7f, 0xdb, 0x7e, 0x96, 0xb1, 0xa7, 0xf1, 0x8a, 0xee,
	0x6b, 0xd8, 0x68, 0x20, 0x17, 0x8f, 0x5d, 0xa0, 0x21, 0xdb, 0x0b, 0xf1, 0x07, 0xf2, 0x6a, 0xf5,
	0xf3, 0x42, 0x50, 0x14, 0x49, 0xee, 0x8f, 0x24, 0x5d, 0x1c, 0x3e, 0x1c, 0x84, 0x23, 0x3e, 0x4c,
	0x7d, 0xbd, 0x4f, 0xc7, 0xc6, 0x70, 0x16, 0x63, 0x12, 0x61, 0x10, 0x62, 0x62, 0x0c, 0x3c, 0x3f,
	0x19, 0xf5, 0xc5, 0x35, 0x33, 0x5f, 0x1c, 0xf9, 0xf1, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x32,
	0xe6, 0x21, 0xb7, 0x01, 0x03, 0x00, 0x00,
}
