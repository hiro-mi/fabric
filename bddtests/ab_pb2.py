# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ab.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='ab.proto',
  package='atomicbroadcast',
  syntax='proto3',
  serialized_pb=_b('\n\x08\x61\x62.proto\x12\x0f\x61tomicbroadcast\":\n\x0f\x62roadcast_reply\x12\'\n\x06status\x18\x01 \x01(\x0e\x32\x17.atomicbroadcast.Status\"!\n\x11\x62roadcast_message\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\x0c\"\x9b\x01\n\tseek_info\x12/\n\x05start\x18\x01 \x01(\x0e\x32 .atomicbroadcast.seek_info.Start\x12\x18\n\x10specified_number\x18\x02 \x01(\x04\x12\x13\n\x0bwindow_size\x18\x03 \x01(\x04\".\n\x05Start\x12\n\n\x06NEWEST\x10\x00\x12\n\n\x06OLDEST\x10\x01\x12\r\n\tSPECIFIED\x10\x02\"!\n\x0f\x61\x63knowledgement\x12\x0e\n\x06number\x18\x01 \x01(\x04\"\x81\x01\n\x0e\x64\x65liver_update\x12;\n\x0f\x61\x63knowledgement\x18\x01 \x01(\x0b\x32 .atomicbroadcast.acknowledgementH\x00\x12*\n\x04seek\x18\x02 \x01(\x0b\x32\x1a.atomicbroadcast.seek_infoH\x00\x42\x06\n\x04type\"o\n\x05\x62lock\x12\x0e\n\x06number\x18\x02 \x01(\x04\x12\x11\n\tprev_hash\x18\x03 \x01(\x0c\x12\r\n\x05proof\x18\x04 \x01(\x0c\x12\x34\n\x08messages\x18\x05 \x03(\x0b\x32\".atomicbroadcast.broadcast_message\"j\n\rdeliver_reply\x12(\n\x05\x65rror\x18\x01 \x01(\x0e\x32\x17.atomicbroadcast.StatusH\x00\x12\'\n\x05\x62lock\x18\x02 \x01(\x0b\x32\x16.atomicbroadcast.blockH\x00\x42\x06\n\x04type*a\n\x06Status\x12\x0b\n\x07SUCCESS\x10\x00\x12\x10\n\x0b\x42\x41\x44_REQUEST\x10\x90\x03\x12\x0e\n\tFORBIDDEN\x10\x93\x03\x12\x0e\n\tNOT_FOUND\x10\x94\x03\x12\x18\n\x13SERVICE_UNAVAILABLE\x10\xf7\x03\x32\xbd\x01\n\x10\x61tomic_broadcast\x12W\n\tbroadcast\x12\".atomicbroadcast.broadcast_message\x1a .atomicbroadcast.broadcast_reply\"\x00(\x01\x30\x01\x12P\n\x07\x64\x65liver\x12\x1f.atomicbroadcast.deliver_update\x1a\x1e.atomicbroadcast.deliver_reply\"\x00(\x01\x30\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_STATUS = _descriptor.EnumDescriptor(
  name='Status',
  full_name='atomicbroadcast.Status',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='SUCCESS', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BAD_REQUEST', index=1, number=400,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='FORBIDDEN', index=2, number=403,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NOT_FOUND', index=3, number=404,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SERVICE_UNAVAILABLE', index=4, number=503,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=670,
  serialized_end=767,
)
_sym_db.RegisterEnumDescriptor(_STATUS)

Status = enum_type_wrapper.EnumTypeWrapper(_STATUS)
SUCCESS = 0
BAD_REQUEST = 400
FORBIDDEN = 403
NOT_FOUND = 404
SERVICE_UNAVAILABLE = 503


_SEEK_INFO_START = _descriptor.EnumDescriptor(
  name='Start',
  full_name='atomicbroadcast.seek_info.Start',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='NEWEST', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='OLDEST', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SPECIFIED', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=234,
  serialized_end=280,
)
_sym_db.RegisterEnumDescriptor(_SEEK_INFO_START)


_BROADCAST_REPLY = _descriptor.Descriptor(
  name='broadcast_reply',
  full_name='atomicbroadcast.broadcast_reply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='atomicbroadcast.broadcast_reply.status', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=29,
  serialized_end=87,
)


_BROADCAST_MESSAGE = _descriptor.Descriptor(
  name='broadcast_message',
  full_name='atomicbroadcast.broadcast_message',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='data', full_name='atomicbroadcast.broadcast_message.data', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=89,
  serialized_end=122,
)


_SEEK_INFO = _descriptor.Descriptor(
  name='seek_info',
  full_name='atomicbroadcast.seek_info',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='start', full_name='atomicbroadcast.seek_info.start', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='specified_number', full_name='atomicbroadcast.seek_info.specified_number', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='window_size', full_name='atomicbroadcast.seek_info.window_size', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _SEEK_INFO_START,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=125,
  serialized_end=280,
)


_ACKNOWLEDGEMENT = _descriptor.Descriptor(
  name='acknowledgement',
  full_name='atomicbroadcast.acknowledgement',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='number', full_name='atomicbroadcast.acknowledgement.number', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=282,
  serialized_end=315,
)


_DELIVER_UPDATE = _descriptor.Descriptor(
  name='deliver_update',
  full_name='atomicbroadcast.deliver_update',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='acknowledgement', full_name='atomicbroadcast.deliver_update.acknowledgement', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='seek', full_name='atomicbroadcast.deliver_update.seek', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='type', full_name='atomicbroadcast.deliver_update.type',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=318,
  serialized_end=447,
)


_BLOCK = _descriptor.Descriptor(
  name='block',
  full_name='atomicbroadcast.block',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='number', full_name='atomicbroadcast.block.number', index=0,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='prev_hash', full_name='atomicbroadcast.block.prev_hash', index=1,
      number=3, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='proof', full_name='atomicbroadcast.block.proof', index=2,
      number=4, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='messages', full_name='atomicbroadcast.block.messages', index=3,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=449,
  serialized_end=560,
)


_DELIVER_REPLY = _descriptor.Descriptor(
  name='deliver_reply',
  full_name='atomicbroadcast.deliver_reply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='error', full_name='atomicbroadcast.deliver_reply.error', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='block', full_name='atomicbroadcast.deliver_reply.block', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='type', full_name='atomicbroadcast.deliver_reply.type',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=562,
  serialized_end=668,
)

_BROADCAST_REPLY.fields_by_name['status'].enum_type = _STATUS
_SEEK_INFO.fields_by_name['start'].enum_type = _SEEK_INFO_START
_SEEK_INFO_START.containing_type = _SEEK_INFO
_DELIVER_UPDATE.fields_by_name['acknowledgement'].message_type = _ACKNOWLEDGEMENT
_DELIVER_UPDATE.fields_by_name['seek'].message_type = _SEEK_INFO
_DELIVER_UPDATE.oneofs_by_name['type'].fields.append(
  _DELIVER_UPDATE.fields_by_name['acknowledgement'])
_DELIVER_UPDATE.fields_by_name['acknowledgement'].containing_oneof = _DELIVER_UPDATE.oneofs_by_name['type']
_DELIVER_UPDATE.oneofs_by_name['type'].fields.append(
  _DELIVER_UPDATE.fields_by_name['seek'])
_DELIVER_UPDATE.fields_by_name['seek'].containing_oneof = _DELIVER_UPDATE.oneofs_by_name['type']
_BLOCK.fields_by_name['messages'].message_type = _BROADCAST_MESSAGE
_DELIVER_REPLY.fields_by_name['error'].enum_type = _STATUS
_DELIVER_REPLY.fields_by_name['block'].message_type = _BLOCK
_DELIVER_REPLY.oneofs_by_name['type'].fields.append(
  _DELIVER_REPLY.fields_by_name['error'])
_DELIVER_REPLY.fields_by_name['error'].containing_oneof = _DELIVER_REPLY.oneofs_by_name['type']
_DELIVER_REPLY.oneofs_by_name['type'].fields.append(
  _DELIVER_REPLY.fields_by_name['block'])
_DELIVER_REPLY.fields_by_name['block'].containing_oneof = _DELIVER_REPLY.oneofs_by_name['type']
DESCRIPTOR.message_types_by_name['broadcast_reply'] = _BROADCAST_REPLY
DESCRIPTOR.message_types_by_name['broadcast_message'] = _BROADCAST_MESSAGE
DESCRIPTOR.message_types_by_name['seek_info'] = _SEEK_INFO
DESCRIPTOR.message_types_by_name['acknowledgement'] = _ACKNOWLEDGEMENT
DESCRIPTOR.message_types_by_name['deliver_update'] = _DELIVER_UPDATE
DESCRIPTOR.message_types_by_name['block'] = _BLOCK
DESCRIPTOR.message_types_by_name['deliver_reply'] = _DELIVER_REPLY
DESCRIPTOR.enum_types_by_name['Status'] = _STATUS

broadcast_reply = _reflection.GeneratedProtocolMessageType('broadcast_reply', (_message.Message,), dict(
  DESCRIPTOR = _BROADCAST_REPLY,
  __module__ = 'ab_pb2'
  # @@protoc_insertion_point(class_scope:atomicbroadcast.broadcast_reply)
  ))
_sym_db.RegisterMessage(broadcast_reply)

broadcast_message = _reflection.GeneratedProtocolMessageType('broadcast_message', (_message.Message,), dict(
  DESCRIPTOR = _BROADCAST_MESSAGE,
  __module__ = 'ab_pb2'
  # @@protoc_insertion_point(class_scope:atomicbroadcast.broadcast_message)
  ))
_sym_db.RegisterMessage(broadcast_message)

seek_info = _reflection.GeneratedProtocolMessageType('seek_info', (_message.Message,), dict(
  DESCRIPTOR = _SEEK_INFO,
  __module__ = 'ab_pb2'
  # @@protoc_insertion_point(class_scope:atomicbroadcast.seek_info)
  ))
_sym_db.RegisterMessage(seek_info)

acknowledgement = _reflection.GeneratedProtocolMessageType('acknowledgement', (_message.Message,), dict(
  DESCRIPTOR = _ACKNOWLEDGEMENT,
  __module__ = 'ab_pb2'
  # @@protoc_insertion_point(class_scope:atomicbroadcast.acknowledgement)
  ))
_sym_db.RegisterMessage(acknowledgement)

deliver_update = _reflection.GeneratedProtocolMessageType('deliver_update', (_message.Message,), dict(
  DESCRIPTOR = _DELIVER_UPDATE,
  __module__ = 'ab_pb2'
  # @@protoc_insertion_point(class_scope:atomicbroadcast.deliver_update)
  ))
_sym_db.RegisterMessage(deliver_update)

block = _reflection.GeneratedProtocolMessageType('block', (_message.Message,), dict(
  DESCRIPTOR = _BLOCK,
  __module__ = 'ab_pb2'
  # @@protoc_insertion_point(class_scope:atomicbroadcast.block)
  ))
_sym_db.RegisterMessage(block)

deliver_reply = _reflection.GeneratedProtocolMessageType('deliver_reply', (_message.Message,), dict(
  DESCRIPTOR = _DELIVER_REPLY,
  __module__ = 'ab_pb2'
  # @@protoc_insertion_point(class_scope:atomicbroadcast.deliver_reply)
  ))
_sym_db.RegisterMessage(deliver_reply)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class atomic_broadcastStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.broadcast = channel.stream_stream(
        '/atomicbroadcast.atomic_broadcast/broadcast',
        request_serializer=broadcast_message.SerializeToString,
        response_deserializer=broadcast_reply.FromString,
        )
    self.deliver = channel.stream_stream(
        '/atomicbroadcast.atomic_broadcast/deliver',
        request_serializer=deliver_update.SerializeToString,
        response_deserializer=deliver_reply.FromString,
        )


class atomic_broadcastServicer(object):

  def broadcast(self, request_iterator, context):
    """broadcast receives a reply of acknowledgement for each broadcast_message in order, indicating success or type of failure
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deliver(self, request_iterator, context):
    """deliver first requires an update containing a seek message, then a stream of block replies is received.
    The receiver may choose to send an acknowledgement for any block number it receives, however acknowledgements must never be more than window_size apart
    To avoid latency, clients will likely acknowledge before the window_size has been exhausted, preventing the server from stopping and waiting for an acknowledgement
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_atomic_broadcastServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'broadcast': grpc.stream_stream_rpc_method_handler(
          servicer.broadcast,
          request_deserializer=broadcast_message.FromString,
          response_serializer=broadcast_reply.SerializeToString,
      ),
      'deliver': grpc.stream_stream_rpc_method_handler(
          servicer.deliver,
          request_deserializer=deliver_update.FromString,
          response_serializer=deliver_reply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'atomicbroadcast.atomic_broadcast', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class Betaatomic_broadcastServicer(object):
  def broadcast(self, request_iterator, context):
    """broadcast receives a reply of acknowledgement for each broadcast_message in order, indicating success or type of failure
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def deliver(self, request_iterator, context):
    """deliver first requires an update containing a seek message, then a stream of block replies is received.
    The receiver may choose to send an acknowledgement for any block number it receives, however acknowledgements must never be more than window_size apart
    To avoid latency, clients will likely acknowledge before the window_size has been exhausted, preventing the server from stopping and waiting for an acknowledgement
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class Betaatomic_broadcastStub(object):
  def broadcast(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
    """broadcast receives a reply of acknowledgement for each broadcast_message in order, indicating success or type of failure
    """
    raise NotImplementedError()
  def deliver(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
    """deliver first requires an update containing a seek message, then a stream of block replies is received.
    The receiver may choose to send an acknowledgement for any block number it receives, however acknowledgements must never be more than window_size apart
    To avoid latency, clients will likely acknowledge before the window_size has been exhausted, preventing the server from stopping and waiting for an acknowledgement
    """
    raise NotImplementedError()


def beta_create_atomic_broadcast_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('atomicbroadcast.atomic_broadcast', 'broadcast'): broadcast_message.FromString,
    ('atomicbroadcast.atomic_broadcast', 'deliver'): deliver_update.FromString,
  }
  response_serializers = {
    ('atomicbroadcast.atomic_broadcast', 'broadcast'): broadcast_reply.SerializeToString,
    ('atomicbroadcast.atomic_broadcast', 'deliver'): deliver_reply.SerializeToString,
  }
  method_implementations = {
    ('atomicbroadcast.atomic_broadcast', 'broadcast'): face_utilities.stream_stream_inline(servicer.broadcast),
    ('atomicbroadcast.atomic_broadcast', 'deliver'): face_utilities.stream_stream_inline(servicer.deliver),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_atomic_broadcast_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('atomicbroadcast.atomic_broadcast', 'broadcast'): broadcast_message.SerializeToString,
    ('atomicbroadcast.atomic_broadcast', 'deliver'): deliver_update.SerializeToString,
  }
  response_deserializers = {
    ('atomicbroadcast.atomic_broadcast', 'broadcast'): broadcast_reply.FromString,
    ('atomicbroadcast.atomic_broadcast', 'deliver'): deliver_reply.FromString,
  }
  cardinalities = {
    'broadcast': cardinality.Cardinality.STREAM_STREAM,
    'deliver': cardinality.Cardinality.STREAM_STREAM,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'atomicbroadcast.atomic_broadcast', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
