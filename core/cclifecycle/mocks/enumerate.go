// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric/common/chaincode"
	cc "github.com/hyperledger/fabric/core/cclifecycle"
)

type Enumerator struct {
	EnumerateStub        func() ([]chaincode.InstalledChaincode, error)
	enumerateMutex       sync.RWMutex
	enumerateArgsForCall []struct{}
	enumerateReturns     struct {
		result1 []chaincode.InstalledChaincode
		result2 error
	}
	enumerateReturnsOnCall map[int]struct {
		result1 []chaincode.InstalledChaincode
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Enumerator) Enumerate() ([]chaincode.InstalledChaincode, error) {
	fake.enumerateMutex.Lock()
	ret, specificReturn := fake.enumerateReturnsOnCall[len(fake.enumerateArgsForCall)]
	fake.enumerateArgsForCall = append(fake.enumerateArgsForCall, struct{}{})
	fake.recordInvocation("Enumerate", []interface{}{})
	fake.enumerateMutex.Unlock()
	if fake.EnumerateStub != nil {
		return fake.EnumerateStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.enumerateReturns.result1, fake.enumerateReturns.result2
}

func (fake *Enumerator) EnumerateCallCount() int {
	fake.enumerateMutex.RLock()
	defer fake.enumerateMutex.RUnlock()
	return len(fake.enumerateArgsForCall)
}

func (fake *Enumerator) EnumerateReturns(result1 []chaincode.InstalledChaincode, result2 error) {
	fake.EnumerateStub = nil
	fake.enumerateReturns = struct {
		result1 []chaincode.InstalledChaincode
		result2 error
	}{result1, result2}
}

func (fake *Enumerator) EnumerateReturnsOnCall(i int, result1 []chaincode.InstalledChaincode, result2 error) {
	fake.EnumerateStub = nil
	if fake.enumerateReturnsOnCall == nil {
		fake.enumerateReturnsOnCall = make(map[int]struct {
			result1 []chaincode.InstalledChaincode
			result2 error
		})
	}
	fake.enumerateReturnsOnCall[i] = struct {
		result1 []chaincode.InstalledChaincode
		result2 error
	}{result1, result2}
}

func (fake *Enumerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enumerateMutex.RLock()
	defer fake.enumerateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Enumerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cc.Enumerator = new(Enumerator)
