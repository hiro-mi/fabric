// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger/fabric/core/chaincode/lifecycle"
	"github.com/hyperledger/fabric/core/common/ccprovider"
	pb "github.com/hyperledger/fabric/protos/peer"
	"golang.org/x/net/context"
)

type Lifecycle struct {
	GetChaincodeDefinitionStub        func(ctx context.Context, txid string, signedProp *pb.SignedProposal, prop *pb.Proposal, chainID string, chaincodeID string) (ccprovider.ChaincodeDefinition, error)
	getChaincodeDefinitionMutex       sync.RWMutex
	getChaincodeDefinitionArgsForCall []struct {
		ctx         context.Context
		txid        string
		signedProp  *pb.SignedProposal
		prop        *pb.Proposal
		chainID     string
		chaincodeID string
	}
	getChaincodeDefinitionReturns struct {
		result1 ccprovider.ChaincodeDefinition
		result2 error
	}
	getChaincodeDefinitionReturnsOnCall map[int]struct {
		result1 ccprovider.ChaincodeDefinition
		result2 error
	}
	ChaincodeContainerInfoStub        func(chainID string, chaincodeID string) (*lifecycle.ChaincodeContainerInfo, error)
	chaincodeContainerInfoMutex       sync.RWMutex
	chaincodeContainerInfoArgsForCall []struct {
		chainID     string
		chaincodeID string
	}
	chaincodeContainerInfoReturns struct {
		result1 *lifecycle.ChaincodeContainerInfo
		result2 error
	}
	chaincodeContainerInfoReturnsOnCall map[int]struct {
		result1 *lifecycle.ChaincodeContainerInfo
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Lifecycle) GetChaincodeDefinition(ctx context.Context, txid string, signedProp *pb.SignedProposal, prop *pb.Proposal, chainID string, chaincodeID string) (ccprovider.ChaincodeDefinition, error) {
	fake.getChaincodeDefinitionMutex.Lock()
	ret, specificReturn := fake.getChaincodeDefinitionReturnsOnCall[len(fake.getChaincodeDefinitionArgsForCall)]
	fake.getChaincodeDefinitionArgsForCall = append(fake.getChaincodeDefinitionArgsForCall, struct {
		ctx         context.Context
		txid        string
		signedProp  *pb.SignedProposal
		prop        *pb.Proposal
		chainID     string
		chaincodeID string
	}{ctx, txid, signedProp, prop, chainID, chaincodeID})
	fake.recordInvocation("GetChaincodeDefinition", []interface{}{ctx, txid, signedProp, prop, chainID, chaincodeID})
	fake.getChaincodeDefinitionMutex.Unlock()
	if fake.GetChaincodeDefinitionStub != nil {
		return fake.GetChaincodeDefinitionStub(ctx, txid, signedProp, prop, chainID, chaincodeID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getChaincodeDefinitionReturns.result1, fake.getChaincodeDefinitionReturns.result2
}

func (fake *Lifecycle) GetChaincodeDefinitionCallCount() int {
	fake.getChaincodeDefinitionMutex.RLock()
	defer fake.getChaincodeDefinitionMutex.RUnlock()
	return len(fake.getChaincodeDefinitionArgsForCall)
}

func (fake *Lifecycle) GetChaincodeDefinitionArgsForCall(i int) (context.Context, string, *pb.SignedProposal, *pb.Proposal, string, string) {
	fake.getChaincodeDefinitionMutex.RLock()
	defer fake.getChaincodeDefinitionMutex.RUnlock()
	return fake.getChaincodeDefinitionArgsForCall[i].ctx, fake.getChaincodeDefinitionArgsForCall[i].txid, fake.getChaincodeDefinitionArgsForCall[i].signedProp, fake.getChaincodeDefinitionArgsForCall[i].prop, fake.getChaincodeDefinitionArgsForCall[i].chainID, fake.getChaincodeDefinitionArgsForCall[i].chaincodeID
}

func (fake *Lifecycle) GetChaincodeDefinitionReturns(result1 ccprovider.ChaincodeDefinition, result2 error) {
	fake.GetChaincodeDefinitionStub = nil
	fake.getChaincodeDefinitionReturns = struct {
		result1 ccprovider.ChaincodeDefinition
		result2 error
	}{result1, result2}
}

func (fake *Lifecycle) GetChaincodeDefinitionReturnsOnCall(i int, result1 ccprovider.ChaincodeDefinition, result2 error) {
	fake.GetChaincodeDefinitionStub = nil
	if fake.getChaincodeDefinitionReturnsOnCall == nil {
		fake.getChaincodeDefinitionReturnsOnCall = make(map[int]struct {
			result1 ccprovider.ChaincodeDefinition
			result2 error
		})
	}
	fake.getChaincodeDefinitionReturnsOnCall[i] = struct {
		result1 ccprovider.ChaincodeDefinition
		result2 error
	}{result1, result2}
}

func (fake *Lifecycle) ChaincodeContainerInfo(chainID string, chaincodeID string) (*lifecycle.ChaincodeContainerInfo, error) {
	fake.chaincodeContainerInfoMutex.Lock()
	ret, specificReturn := fake.chaincodeContainerInfoReturnsOnCall[len(fake.chaincodeContainerInfoArgsForCall)]
	fake.chaincodeContainerInfoArgsForCall = append(fake.chaincodeContainerInfoArgsForCall, struct {
		chainID     string
		chaincodeID string
	}{chainID, chaincodeID})
	fake.recordInvocation("ChaincodeContainerInfo", []interface{}{chainID, chaincodeID})
	fake.chaincodeContainerInfoMutex.Unlock()
	if fake.ChaincodeContainerInfoStub != nil {
		return fake.ChaincodeContainerInfoStub(chainID, chaincodeID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.chaincodeContainerInfoReturns.result1, fake.chaincodeContainerInfoReturns.result2
}

func (fake *Lifecycle) ChaincodeContainerInfoCallCount() int {
	fake.chaincodeContainerInfoMutex.RLock()
	defer fake.chaincodeContainerInfoMutex.RUnlock()
	return len(fake.chaincodeContainerInfoArgsForCall)
}

func (fake *Lifecycle) ChaincodeContainerInfoArgsForCall(i int) (string, string) {
	fake.chaincodeContainerInfoMutex.RLock()
	defer fake.chaincodeContainerInfoMutex.RUnlock()
	return fake.chaincodeContainerInfoArgsForCall[i].chainID, fake.chaincodeContainerInfoArgsForCall[i].chaincodeID
}

func (fake *Lifecycle) ChaincodeContainerInfoReturns(result1 *lifecycle.ChaincodeContainerInfo, result2 error) {
	fake.ChaincodeContainerInfoStub = nil
	fake.chaincodeContainerInfoReturns = struct {
		result1 *lifecycle.ChaincodeContainerInfo
		result2 error
	}{result1, result2}
}

func (fake *Lifecycle) ChaincodeContainerInfoReturnsOnCall(i int, result1 *lifecycle.ChaincodeContainerInfo, result2 error) {
	fake.ChaincodeContainerInfoStub = nil
	if fake.chaincodeContainerInfoReturnsOnCall == nil {
		fake.chaincodeContainerInfoReturnsOnCall = make(map[int]struct {
			result1 *lifecycle.ChaincodeContainerInfo
			result2 error
		})
	}
	fake.chaincodeContainerInfoReturnsOnCall[i] = struct {
		result1 *lifecycle.ChaincodeContainerInfo
		result2 error
	}{result1, result2}
}

func (fake *Lifecycle) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getChaincodeDefinitionMutex.RLock()
	defer fake.getChaincodeDefinitionMutex.RUnlock()
	fake.chaincodeContainerInfoMutex.RLock()
	defer fake.chaincodeContainerInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Lifecycle) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
