// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"sync"

	"github.com/hyperledger/fabric/core/common/ccprovider"
	pb "github.com/hyperledger/fabric/protos/peer"
	"golang.org/x/net/context"
)

type Executor struct {
	ExecuteChaincodeStub        func(ctxt context.Context, cccid *ccprovider.CCContext, args [][]byte) (*pb.Response, *pb.ChaincodeEvent, error)
	executeChaincodeMutex       sync.RWMutex
	executeChaincodeArgsForCall []struct {
		ctxt  context.Context
		cccid *ccprovider.CCContext
		args  [][]byte
	}
	executeChaincodeReturns struct {
		result1 *pb.Response
		result2 *pb.ChaincodeEvent
		result3 error
	}
	executeChaincodeReturnsOnCall map[int]struct {
		result1 *pb.Response
		result2 *pb.ChaincodeEvent
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Executor) ExecuteChaincode(ctxt context.Context, cccid *ccprovider.CCContext, args [][]byte) (*pb.Response, *pb.ChaincodeEvent, error) {
	var argsCopy [][]byte
	if args != nil {
		argsCopy = make([][]byte, len(args))
		copy(argsCopy, args)
	}
	fake.executeChaincodeMutex.Lock()
	ret, specificReturn := fake.executeChaincodeReturnsOnCall[len(fake.executeChaincodeArgsForCall)]
	fake.executeChaincodeArgsForCall = append(fake.executeChaincodeArgsForCall, struct {
		ctxt  context.Context
		cccid *ccprovider.CCContext
		args  [][]byte
	}{ctxt, cccid, argsCopy})
	fake.recordInvocation("ExecuteChaincode", []interface{}{ctxt, cccid, argsCopy})
	fake.executeChaincodeMutex.Unlock()
	if fake.ExecuteChaincodeStub != nil {
		return fake.ExecuteChaincodeStub(ctxt, cccid, args)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.executeChaincodeReturns.result1, fake.executeChaincodeReturns.result2, fake.executeChaincodeReturns.result3
}

func (fake *Executor) ExecuteChaincodeCallCount() int {
	fake.executeChaincodeMutex.RLock()
	defer fake.executeChaincodeMutex.RUnlock()
	return len(fake.executeChaincodeArgsForCall)
}

func (fake *Executor) ExecuteChaincodeArgsForCall(i int) (context.Context, *ccprovider.CCContext, [][]byte) {
	fake.executeChaincodeMutex.RLock()
	defer fake.executeChaincodeMutex.RUnlock()
	return fake.executeChaincodeArgsForCall[i].ctxt, fake.executeChaincodeArgsForCall[i].cccid, fake.executeChaincodeArgsForCall[i].args
}

func (fake *Executor) ExecuteChaincodeReturns(result1 *pb.Response, result2 *pb.ChaincodeEvent, result3 error) {
	fake.ExecuteChaincodeStub = nil
	fake.executeChaincodeReturns = struct {
		result1 *pb.Response
		result2 *pb.ChaincodeEvent
		result3 error
	}{result1, result2, result3}
}

func (fake *Executor) ExecuteChaincodeReturnsOnCall(i int, result1 *pb.Response, result2 *pb.ChaincodeEvent, result3 error) {
	fake.ExecuteChaincodeStub = nil
	if fake.executeChaincodeReturnsOnCall == nil {
		fake.executeChaincodeReturnsOnCall = make(map[int]struct {
			result1 *pb.Response
			result2 *pb.ChaincodeEvent
			result3 error
		})
	}
	fake.executeChaincodeReturnsOnCall[i] = struct {
		result1 *pb.Response
		result2 *pb.ChaincodeEvent
		result3 error
	}{result1, result2, result3}
}

func (fake *Executor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeChaincodeMutex.RLock()
	defer fake.executeChaincodeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Executor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
